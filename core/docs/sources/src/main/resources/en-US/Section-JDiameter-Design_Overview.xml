<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "User_Guide.ent">%BOOK_ENTITIES;]>

<section id="jdiameter-design">

	<title>&THIS.PLATFORM; Diameter Stack Design</title>

	<section id="jdiameter-design_extensibility">
		<title>&THIS.PLATFORM; Diameter Stack Extensibility</title>
		<para>
			&THIS.PLATFORM; Diameter Stack has been designed to be extensible. In order to achieve that, two set of <acronym>API</acronym> are implemented by the stack:
			One that defines basic contracts between user application and stack. A second which defines contracts allowing for instance to inject custom objects into stack, to perform certain tasks, as <classname>SessionFactory</classname> is an example of, which defines basic methods to create <classname>Sessions</classname>.
			<classname>ISessionFactory</classname> declares additional methods which allow developer to declare custom behaviour (custom application sessions, please refer to <xref linkend="jdiameter-source_overview-session_factory" /> for more detailed information).
		</para>
		<figure>
			<title>&THIS.PLATFORM; Diameter Stack Extensibility Visualization</title>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" align="center" fileref="images/DIA_2_x_JD_DESIGN.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>&THIS.PLATFORM; Diameter Stack Extensibility Visualization</para>
				</textobject>
			</mediaobject>
		</figure>
		<para>General pattern for interface declaration can be understood as follows: Interface <classname>ComponentInterface</classname> declares minimal set of methods for component to perform its task, and Interface <classname>IComponentInterface</classname> provides additional behavior methods. Please refer to java doc for list of interfaces and description of method contracts.</para>
	</section>

	<section id="jdiameter-design_model">
		<title>&THIS.PLATFORM; Diameter Stack Model</title>
		<para>&THIS.PLATFORM; Diameter Stack operates in a different way than regular stacks. It does not maintain references to handles (sessions) used by application, nor does it maintain state of those handles. It performs the following tasks:</para>
		<itemizedlist>
			<listitem>
				<para>Manage connections to remote peers</para>
			</listitem>
			<listitem>
				<para>Send messages on behalf of sessions</para>
			</listitem>
			<listitem>
				<para>Receive and deliver messages to assigned listeners (usually session object)</para>
			</listitem>
		</itemizedlist>
		<para>Sessions use stack and services it provides to communicate with remote peers. Application is only place which holds reference to sessions. It can be seen as follows:</para>
		<figure>
			<title>&THIS.PLATFORM; Diameter Application and Stack Model</title>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" align="center"
						fileref="images/DIA_2_x_JD_stack_model.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>&THIS.PLATFORM; Diameter Application and Stack Model</para>
				</textobject>
			</mediaobject>
		</figure>
	</section>
</section>
