<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Diameter_User_Guide.ent">
%BOOK_ENTITIES;]>
<section id="dcrat-Diameter_CCA_Resource_Adapter_Type">
  <title>Resource Adapter Type</title>
  <para>The CCA Resource Adapter Type provides the following types:</para>
  <itemizedlist>
    <listitem>
      <para>Activities</para>
    </listitem>
    <listitem>
      <para>Provider</para>
    </listitem>
    <listitem>
      <para>Message Factory</para>
    </listitem>
  </itemizedlist>
  <formalpara>
    <title>Activities</title>
    <para>The following activities are available, with the API definition listed for reference.  The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.</para>
  </formalpara>
  <para>The life cycle of an activity depends on the type of received request and the application interaction.  In the case of a subscription activity, the activity  timeout is taken into consideration because the subscription may be time-based.  </para>
  <para>The activities allow the CCA to retrieve messages and AVP factories bound to the current session.  The functionality offered is limited only  by the implementation used. </para>
  <para>Each Request type is defined by the <literal>CC-Request-Type</literal> Attribute Value Pair (AVP).  The types of activities are described below: </para>
  <itemizedlist>
    <listitem>
      <para>event-based - when <literal>CC-Request-Type = EVENT</literal>. Activities created for this kind of request are terminated once an answer is sent(server)/received(client) or when the session is terminated due to lack of an answer.</para>
    </listitem>
    <listitem>
      <para>session-based - when the first message contains <literal>CC-Request-Type = INITIAL</literal>, and the last message contains  <literal>CC-Request-Type = TERMINATION</literal>. Any number of &quot;UPDATE&quot; messages are allowed between the  initial and terminating message.</para>
    </listitem>
  </itemizedlist>
  <variablelist>
    <title>CCA Activities</title>
    <varlistentry>
      <term>CreditControlClientSession</term>
      <listitem>
        <para>Created on demand. The life cycle of this session depends on the type of request. The request type is indicated by <literal>CC-Request-Type</literal> AVP. </para>
        <programlisting role="JAVA">/**
   * Create a Credit-Control-Request message pre-populated with the AVPs
   * appropriate for this session.
   * 
   * @return a new CreditControlRequest
   */
  CreditControlRequest createCreditControlRequest();

  /**
   * Send an event Credit-Control-Request. An event containing the answer will
   * be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send an initial Credit-Control-Request. An event containing the answer
   * will be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendInitialCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send a Re-Auth-Answer message.
   * 
   * @param rar the CreditControlRequest to send
   * @throws IOException
   */
  void sendReAuthAnswer(ReAuthAnswer rar) throws IOException;

  /**
   * Send an update (intermediate) Credit-Control-Request. An event containing
   * the answer will be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendUpdateCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send a termination Credit-Control-Request. An event containing the answer
   * will be fired on this activity. The activity will end when the event is
   * fired.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException 
   */
  void sendTerminationCreditControlRequest(CreditControlRequest ccr) throws IOException;
/**
   * Provides session state information. CC session must conform to CC FSM as
   * described in &lt;a href=&quot;link http://rfc.net/rfc4006.html#s7&quot;&gt;section 7 of rfc4006&lt;/a&gt;
   * 
   * @return instance of {@link CreditControlSessionState}
   */
  public CreditControlSessionState getState();

  /**
   * Returns the session ID of the credit control session, which uniquely
   * identifies the session.
   * 
   * @return 
   */
  public String getSessionId();

  public CreditControlAVPFactory getCCAAvpFactory();

  public CreditControlMessageFactory getCCAMessageFactory();
</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>CreditControlServerSession</term>
      <listitem>
        <para>Created once a request is received and there is no matching activity for it. Its life cycle is identical to that of a client activity.</para>
        <programlisting role="JAVA"> /**
   * Create a Credit-Control-Answer message pre-populated with the AVPs
   * appropriate for this session.
   * 
   * @return a new CreditControlAnswer
   */
  CreditControlAnswer createCreditControlAnswer();

  /**
   * Send a Credit-Control-Answer message to the CC client.
   * 
   * @param cca the CreditControlAnswer to send
   * @throws IOException
   */
  void sendCreditControlAnswer(CreditControlAnswer cca) throws IOException;

  /**
   * Send a Re-Auth-Request message to the CC client.
   * 
   * @param rar the ReAuthRequest to send
   * @throws IOException 
   * @throws IOException
   */
  void sendReAuthRequest(ReAuthRequest rar) throws IOException;
/**
   * Provides session state information. CC session must conform to CC FSM as
   * described in &lt;a href=&quot;link http://rfc.net/rfc4006.html#s7&quot;&gt;section 7 of rfc4006&lt;/a&gt;
   * 
   * @return instance of {@link CreditControlSessionState}
   */
  public CreditControlSessionState getState();

  /**
   * Returns the session ID of the credit control session, which uniquely
   * identifies the session.
   * 
   * @return 
   */
  public String getSessionId();

  public CreditControlAVPFactory getCCAAvpFactory();

  public CreditControlMessageFactory getCCAMessageFactory();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  <formalpara>
    <title>Provider</title>
    <para>Provider allows services to create activities, access some topology information and send/receive message in a synchronized way. </para>
  </formalpara>
  <programlisting role="JAVA">public interface CreditControlProvider {

  /**
   * Create a new client session to send and receive Diameter messages.
   * All messages sent on an activity created by this method must contain valid
   * routing AVPs (one or both of Destination-Realm and Destination-Host as
   * defined by RFC3588).
   * 
   * @return a instance of a CreditControlClientSession to send credit control messages
   */
  public CreditControlClientSession createClientSession()throws CreateActivityException;

  /**
   * Create a new client session to send and receive Diameter messages.
   * Messages sent on an activity created by this method will automatically
   * have the Destination-Host and Destination-Realm AVPs set to the provided
   * values.
   * 
   * @param destinationHost a destination host to automatically put in all messages, may be null if not needed
   * @param destinationRealm a destination realm to automatically put in all messages
   * @return a instance of a CreditControlClientSession to send credit control messages
   * @throws CreateActivityException 
   */
  public CreditControlClientSession createClientSession(
      DiameterIdentity destinationHost,
      DiameterIdentity destinationRealm) throws CreateActivityException;

  /**
   * Return a message factory to be used to create credit control messages
   * 
   * @return a CreditControlMessageFactory implementation
   */
  public CreditControlMessageFactory getCreditControlMessageFactory();

  /**
   * Return a AVP factory to be used to create credit control AVPs
   * 
   * @return a CreditControlAVPFactory implementation
   */
  public CreditControlAVPFactory getCreditControlAVPFactory();

  /**
   * Return the number of peers this Diameter resource adaptor is connected
   * to.
   * 
   * @return connected peer count
   */
  int getPeerCount();

  /**
   * Returns array containing identities of connected peers 
   * should it be InetAddres, Port pair?
   * 
   * @return
   */
  DiameterIdentity[] getConnectedPeers();</programlisting>
</section>
