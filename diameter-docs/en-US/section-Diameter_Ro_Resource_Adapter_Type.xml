<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Diameter_User_Guide.ent">
%BOOK_ENTITIES;]>
<section id="drrat-Diameter_Ro_Resource_Adapter_Type">
  <title>Resource Adapter Type</title>
  <para>Resource Adapter Type provides following elements:</para>
  <itemizedlist>
    <listitem>
      <para>Activities</para>
    </listitem>
    <listitem>
      <para>Provider</para>
    </listitem>
    <listitem>
      <para>Message Factory</para>
    </listitem>
  </itemizedlist>
  <formalpara>
    <title>Activities</title>
    <para>The following activities are available, with the API definition listed for reference.  The API defines methods to create requests, send and receive answers for a certain activity, and retrieve session-specific data.  </para>
  </formalpara>
  <para>The life cycle of an activity depends on the type of received request and the application interaction. Request type is defined by the CC-Request-Type AVP. In case of session like interaction (SCUR), the activity timeout is taken into consideration. Please refer to  <!--TODO: add ref to ro-Figure_IEC_Flow, ro-Figure_ECUR_Flow and ro-Figure_SCUR_Flow-->   </para>
  <para>The activities allow the Ro application to retrieve messages and AVP factories bound to the current session.  The functionality offered is limited only  by the implementation used.</para>
  <variablelist>
    <title>Ro Activities</title>
    <varlistentry>
      <term>RoClientSession</term>
      <listitem>
        <para>created at beginning of request. The session&apos;s life cycle depends on the CC-Request-Type content sent as its first message. It is  subject to timeout if an answer is not received.</para>
        <programlisting role="JAVA"><!--TODO: Developer:  add this, we had example but its gone?
Content: How section can be "gone" ?--> /**
   * Send an Accounting Request.
   * 
   * @param accountingRequest request message to send
   * @throws IOException if the message could not be sent 
   * @throws IllegalArgumentException if accountingRequest is missing any required AVPs
   */
  public void sendAccountingRequest(AccountingRequest accountingRequest) throws IOException, IllegalArgumentException;
/**
 * Send Account Request to Server
 * @param request
 * @throws IOException 
 */
 void sendAccountRequest(AccountingRequest request) throws IOException;
/**
 * Returns accounting session state of underlying session. Valid values are: Idle,PendingS,PendingE,PendingB,Open,PendingI,PendingL
 * {@link AccountingSessionState}
 * @return
 */
AccountingSessionState getAccountingSessionState();
/**
   * Return a message factory to be used to create concrete implementations of credit control messages.
   * 
   * @return
   */
  public RfMessageFactory getRfMessageFactory();</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>RoServerSession</term>
      <listitem>
        <para>created by RA when the request enters SLEE. The session&apos;s life cycle depends on the CC-Request-Type AVP content received in first request.</para>
        <programlisting role="JAVA"><!--TODO: Add code here, we had example, but its gone?-->/**
   * Create an Accounting-Answer with the Acct-Application-Id set to 3.
   *
   * @return an Accounting-Answer
   */
  public AccountingAnswer createRfAccountingAnswer();
  
  /**
   * Create an Accounting-Answer with some AVPs populated from the provided Accounting-Request.
   * 
   * The ACA will contain the AVPs specified in createRfAccountingAnswer() and the following AVPs from the Accounting-Request:
   * &lt;ul&gt;Accounting-Record-Type&lt;/ul&gt;
   * &lt;ul&gt;Accounting-Record-Number&lt;/ul&gt;
   * 
   * @param acr Accounting-Request to copy AVPs from
   * @return an Accounting-Answer
   */
  public AccountingAnswer createRfAccountingAnswer(AccountingRequest acr);
  
  /**
   * Send an Accounting Answer.
   * 
   * @param accountingAnswer answer message to send
   * @throws IOException if the message could not be sent 
   * @throws IllegalArgumentException if accountingAnswer is missing any required AVPs
   */
  public void sendAccountingAnswer(AccountingAnswer accountingAnswer) throws IOException, IllegalArgumentException;
/**
   * Return a message factory to be used to create concrete implementations of credit control messages.
   * 
   * @return
   */
  public RfMessageFactory getRfMessageFactory();
/**
 * Sends generated answer back to client
 * @param answer
 * @throws IOException
 */
void sendAccountAnswer(AccountingAnswer answer) throws IOException;
/**
 * Returns accounting session state of underlying session. Valid values are: Idle,PendingS,PendingE,PendingB,Open,PendingI,PendingL
 * {@link AccountingSessionState}
 * @return
 */
AccountingSessionState getAccountingSessionState();</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  <formalpara>
    <title>Provider</title>
    <para>Provider allows services to create activities, access some topology information and send/receive message in a synchronized way.</para>
  </formalpara>
  <para>The API for the Provider is more than 100 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/ro/ratype/src/main/java/net/java/slee/resource/diameter/ro/RoProvider.java">RoProvider.java</ulink></para>
  <formalpara>
    <title>Message Factory</title>
    <para>The Message Factory creates events  that can be executed within the JAIN SLEE Server.  Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.</para>
  </formalpara>
  <programlisting role="JAVA">public interface RoMessageFactory {

  public static final long _RO_TGPP_VENDOR_ID = 10415L;
  public static final int  _RO_AUTH_APP_ID = 4;

  /**
   * Creates an empty Credit Control Request message.
   * 
   * @return
   */
  public CreditControlRequest createRoCreditControlRequest();
  
  /**
   * Creates a Credit Control Request message with the Session-Id AVP populated with the sessionId parameter.
   * 
   * @param sessionId
   * @return
   */
  public CreditControlRequest createRoCreditControlRequest(String sessionId);
  
  /**
   * Returns a reference to a message factory that can be used to create AVPs defined by the Diameter Base specification.
   * 
   * @return Base Diameter message factory
   */
  public DiameterMessageFactory getBaseMessageFactory();
  
}
</programlisting>
</section>
