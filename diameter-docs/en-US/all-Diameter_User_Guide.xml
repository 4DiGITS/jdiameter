<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Diameter_User_Guide.ent">
%BOOK_ENTITIES;
<!ENTITY % BOOK_ENTITIES SYSTEM "Diameter_User_Guide.ent">
<!ENTITY PRODUCT "JBoss_Communications_Platform">
<!ENTITY BOOKID "doc-Diameter_User_Guide">
<!ENTITY YEAR "2009">
<!ENTITY HOLDER "Red Hat Inc">
]>
<book lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><bookinfo id="dug-Diameter_User_Guide" lang="en-US">
	<!--  chapter id nickname: sssug  --><title>Diameter User Guide</title>
	<subtitle>The Guide to the Mobicents Diameter Adapter</subtitle>
	<productname>Mobicents Platform</productname>
	<productnumber>1.2.1</productnumber>
	<edition>1.0</edition>
	<pubsnumber>1</pubsnumber>
	<abstract>
		<para><application condition="mob">The Mobicents Platform</application> is the first and only open source <acronym>VoIP</acronym> platform certified for <acronym>JAIN SLEE</acronym> 1.0 and <acronym>SIP</acronym> Servlets 1.1 compliance. <application condition="mob">Mobicents</application> serves as a high-performance core for Service Delivery Platforms (<acronym>SDP</acronym>s) and <acronym>IP</acronym> Multimedia Subsystems (<acronym>IMS</acronym>s) by leveraging <acronym>J2EE</acronym> to enable the convergence of data and video in Next-Generation
Intelligent Network (<acronym>NGIN</acronym>) applications.</para>
			<para>The <application condition="mob">Mobicents Platform</application> enables the composition of predefined Service Building Blocks (<acronym>SBB</acronym>s) such as Call-Control, Billing, User-Provisioning, Administration
and Presence-Sensing. Out-of-the-box monitoring and management of <application condition="mob">Mobicents</application> components is achieved through <acronym>JMX</acronym> Consoles. <acronym>JSLEE</acronym> allows popular protocol stacks such as <acronym>SIP</acronym> to be plugged in as Resource Adapters (<acronym>RA</acronym>s), and Service Building Blocks—which share many similarities with <acronym>EJB</acronym>s—allow the easy accommodation and integration of enterprise
applications with end points such as the Web, Customer Relationship
Management (<acronym>CRM</acronym>) systems and Service-Oriented Architectures (<acronym>SOA</acronym>s). The <application condition="mob">Mobicents Platform</application> is the natural choice for telecommunication Operations Support
Systems (OSSs) and Network Management Systems (NMSs).</para>
				<para>In addition to the telecommunication industry, the <application condition="mob">Mobicents Platform</application> is suitable for a variety of problem domains demanding an
Event-Driven Architecture (<acronym>EDA</acronym>) for high-volume, low-latency signaling, such as financial
trading, online gaming, (<acronym>RFID</acronym>) sensor network integration, and distributed control.</para></abstract>
					<corpauthor>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="Common_Content/images/title_logo.svg" format="SVG"/>
							</imageobject>
							<textobject>
								<phrase>Logo</phrase>
							</textobject>
						</inlinemediaobject>
					</corpauthor>
					<copyright>
						<year>2009</year>
						<holder>Red Hat Inc</holder>
					</copyright>
					<!-- ORIGINAL:
 <xi:include
  href="Common_Content/Legal_Notice.xml"
  xmlns:xi="http://www.w3.org/2001/XInclude" /> --><!-- FOR JDOCBOOK: --><!-- <xi:include
  xmlns:xi="http://www.w3.org/2001/XInclude"
  href="Common_Content/Legal_Notice.xml">
  <xi:fallback
   xmlns:xi="http://www.w3.org/2001/XInclude">
   <xi:include
    href="fallback_content/Legal_Notice.xml"
    xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </xi:fallback>
 </xi:include> --> <authorgroup lang="en-US">
	<author>
		<firstname>Alexandre</firstname>
		<surname>Mendonça</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">brainslog@gmail.com</email>
	</author>
	<author>
		<firstname>Bartosz</firstname>
		<surname>Baranowski</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">baranowb@gmail.com</email>
	</author>
	<author>
		<firstname>Jared</firstname>
		<surname>Morgan</surname>
		<contrib>Technical Writer and Editor</contrib>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv>Engineering Content Services</orgdiv>
		</affiliation>
		<email>jmorgan@redhat.com</email>
	</author>
	<author>
		<firstname>Tom</firstname>
		<surname>Wells</surname>
		<contrib>Technical Writer and Editor</contrib>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv>Engineering Content Services</orgdiv>
		</affiliation>
		<email>twells@redhat.com</email>
	</author>
</authorgroup>
				</bookinfo>
	<preface lang="en-US">
	<title>Preface</title>
	<para>
		 
	</para>
	<section lang="en-US" xml:base="fallback_content/Conventions.xml">
	<title>Document Conventions</title>
	<para>
		This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
	</para>
	<para>
		In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed. Note: Red Hat Enterprise Linux 5 and later includes the Liberation Fonts set by default.
	</para>
	<section>
		<title>Typographic Conventions</title>
		<para>
			Four typographic conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
		</para>
		<para>
			<literal>Mono-spaced Bold</literal>
		</para>
		<para>
			Used to highlight system input, including shell commands, file names and paths. Also used to highlight key caps and key-combinations. For example:
		</para>
		<blockquote>
			<para>
				To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
			</para>
		</blockquote>
		<para>
			The above includes a file name, a shell command and a key cap, all presented in Mono-spaced Bold and all distinguishable thanks to context.
		</para>
		<para>
			Key-combinations can be distinguished from key caps by the hyphen connecting each part of a key-combination. For example:
		</para>
		<blockquote>
			<para>
				Press <keycap>Enter</keycap> to execute the command.
			</para>
			<para>
				Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo> to switch to the first virtual terminal. Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F7</keycap></keycombo> to return to your X-Windows session.
			</para>
		</blockquote>
		<para>
			The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
		</para>
		<para>
			If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph will be presented as above, in <literal>Mono-spaced Bold</literal>. For example:
		</para>
		<blockquote>
			<para>
				File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
			</para>
		</blockquote>
		<para>
			<application>Proportional Bold</application>
		</para>
		<para>
			This denotes words or phrases encountered on a system, including application names; dialog box text; labeled buttons; check-box and radio button labels; menu titles and sub-menu titles. For example:
		</para>
		<blockquote>
			<para>
				Choose <guimenu>System &gt; Preferences &gt; Mouse</guimenu> from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
			</para>
			<para>
				To insert a special character into a <application>gedit</application> file, choose <guimenu>Applications &gt; Accessories &gt; Character Map</guimenu> from the main menu bar. Next, choose <guimenu>Search &gt; Find…</guimenu> from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <guimenu>Edit &gt; Paste</guimenu> from the <application>gedit</application> menu bar.
			</para>
		</blockquote>
		<para>
			The above text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all presented in Proportional Bold and all distinguishable by context.
		</para>
		<para>
			Note the <guimenu>&gt;</guimenu> shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow 'Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar' approach.
		</para>
		<para>
			<command><replaceable>Mono-spaced Bold Italic</replaceable></command> or <application><replaceable>Proportional Bold Italic</replaceable></application>
		</para>
		<para>
			Whether Mono-spaced Bold or Proportional Bold, the addition of Italics indicates replaceable or variable text. Italics denotes text you do not input literally or displayed text that changes depending on circumstance. For example:
		</para>
		<blockquote>
			<para>
				To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable></command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
			</para>
			<para>
				The <command>mount -o remount <replaceable>file-system</replaceable></command> command remounts the named file system. For example, to remount the <filename>/home</filename> file system, the command is <command>mount -o remount /home</command>.
			</para>
			<para>
				To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable></command> command. It will return a result as follows: <command><replaceable>package-version-release</replaceable></command>.
			</para>
		</blockquote>
		<para>
			Note the words in bold italics above — username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
		</para>
		<para>
			Aside from standard usage for presenting the title of a work, italics denotes the first use of a new and important term. For example:
		</para>
		<blockquote>
			<para>
				When the Apache HTTP Server accepts requests, it dispatches child processes or threads to handle them. This group of child processes or threads is known as a <firstterm>server-pool</firstterm>. Under Apache HTTP Server 2.0, the responsibility for creating and maintaining these server-pools has been abstracted to a group of modules called <firstterm>Multi-Processing Modules</firstterm> (<firstterm>MPMs</firstterm>). Unlike other modules, only one module from the MPM group can be loaded by the Apache HTTP Server.
			</para>
		</blockquote>
	</section>
	
	<section>
		<title>Pull-quote Conventions</title>
		<para>
			Two, commonly multi-line, data types are set off visually from the surrounding text.
		</para>
		<para>
			Output sent to a terminal is set in <computeroutput>Mono-spaced Roman</computeroutput> and presented thus:
		</para>
		
<screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
		<para>
			Source-code listings are also set in <computeroutput>Mono-spaced Roman</computeroutput> but are presented and highlighted as follows:
		</para>
		
<programlisting language="JAVA">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[]) 
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup("EchoBean");
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println("Created Echo");

      System.out.println("Echo.echo('Hello') = " + echo.echo("Hello"));
   }
   
}
</programlisting>
	</section>
	
	<section>
		<title>Notes and Warnings</title>
		<para>
			Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
		</para>
		<warning>
			<title>Warning</title>
			<para>
				A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
			</para>
		</warning>
		<important>
			<title>Important</title>
			<para>
				Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won't cause data loss but may cause irritation and frustration.
			</para>
		</important>
		<note>
			<title>Note</title>
			<para>
				A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
			</para>
		</note>
	</section>

</section>
	<section lang="en-US" xml:base="fallback_content/Feedback.xml">
	<title>We Need Feedback!</title>
	<para>
		If you find a typographical error in this manual, or if you have thought of a way to make this manual better, we would love to hear from you! Please submit a report in Bugzilla: <ulink url="http://bugzilla.redhat.com/bugzilla/">http://bugzilla.redhat.com/bugzilla/</ulink> against the product <application>JBoss_Communications_Platform.</application>
	</para>
	<para>
		When submitting a bug report, be sure to mention the manual's identifier: <citetitle>doc-Diameter_User_Guide</citetitle>
	</para>
	<para>
		If you have a suggestion for improving the documentation, try to be as specific as possible when describing it. If you have found an error, please include the section number and some of the surrounding text so we can find it easily.
	</para>
</section>
</preface>
	<chapter id="i-Introduction" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Introduction</title>
	<para>
		Diameter is a computer networking protocol for AAA (Authentication, Authorization and Accounting) defined in RFC 3588. It is a successor to RADIUS (and its name is a reference to it, a diameter is twice the radius) offering the following advantages:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Reliable transport protocols (TCP or SCTP, not UDP)
			</para>
		</listitem>
		<listitem>
			<para>
				Network or transport level security (IPSec or TLS)
			</para>
		</listitem>
		<listitem>
			<para>
				Transition support for RADIUS, although Diameter is not fully compatible with RADIUS
			</para>
		</listitem>
		<listitem>
			<para>
				Larger address space for attribute-value pairs (AVPs) and identifiers (32 bits instead of 8 bits)
			</para>
		</listitem>
		<listitem>
			<para>
				Client-server protocol, with exception of supporting some server-initiated messages as well
			</para>
		</listitem>
		<listitem>
			<para>
				Both stateful and stateless models can be used
			</para>
		</listitem>
		<listitem>
			<para>
				Dynamic discovery of peers (using DNS SRV and NAPTR)
			</para>
		</listitem>
		<listitem>
			<para>
				Capability negotiation
			</para>
		</listitem>
		<listitem>
			<para>
				Supports application layer acknowledgments, defines failover methods and state machines (RFC 3539)
			</para>
		</listitem>
		<listitem>
			<para>
				Error notification
			</para>
		</listitem>
		<listitem>
			<para>
				Better roaming support
			</para>
		</listitem>
		<listitem>
			<para>
				More easily extended; new commands and attributes can be defined
			</para>
		</listitem>
		<listitem>
			<para>
				Aligned on 32-bit boundaries
			</para>
		</listitem>
		<listitem>
			<para>
				Basic support for user-sessions and accounting
			</para>
		</listitem>
	</itemizedlist>
	<para>
		It was designed in a way to be compatible with RADIUS but also to be easily extended with new use cases within AAA scenario and other IMS scenarios. Extensions are called "Applications".
	</para>
	<para>
		Each application introduces new types of messages, AVP codes, and state machines. The Message and AVP codes are assigned by the IANA. Furthermore, each application has its own application ID and vendor ID that is used to distinguish between applications. In addition, application code is used to signal to other peers which operations are supported by connecting peer (Capabilities Exchange).
	</para>
	<section id="mf-Message_Format" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Message Format</title>
	<para>
		Each message that is sent and received using Diameter is comprised according to a consistent structure. A Diameter message always contains message headers, and the message payload.
	</para>
	<figure>
		<title>Diameter Message Structure</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-Introduction-dia-DiameterPacketFormat.png" format="PNG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		Within the message, several headers are present:
	</para>
	<variablelist>
		<title>Message Headers</title>
		<varlistentry>
			<term>Version</term>
			<listitem>
				<para>
					Indicates the Diameter protocol version. This value is always set to <literal>1</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Message Length</term>
			<listitem>
				<para>
					Indicates the Diameter message length, including the header fields.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Command Flags</term>
			<listitem>
				<para>
					Bits, which specify the type of message. The first four bits are occupied with any one of the following values:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							R = Message is a request
						</para>
					</listitem>
					<listitem>
						<para>
							P = Message is proxiable
						</para>
					</listitem>
					<listitem>
						<para>
							E = Message is an error message
						</para>
					</listitem>
					<listitem>
						<para>
							T = Message is potentially retransmitted
						</para>
					</listitem>
				</itemizedlist>
				<para>
					The last four bits are reserved for future use, and should be set to <literal>0</literal>
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Command Code</term>
			<listitem>
				<para>
					Indicates the command associated with the message, such as what type of message it is.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Application ID</term>
			<listitem>
				<para>
					Identifies which application the message is applicable to. The application can be an authentication, accounting, or vendor-specific application.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Hop-by-Hop ID</term>
			<listitem>
				<para>
					Unique ID that is used to match requests and replies. The Answer message must ensure this header field contains the same value present in the corresponding request.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>End-to-End ID</term>
			<listitem>
				<para>
					Time-limited unique ID that is used to to detect duplicate messages. The ID must be unique for at least four minutes. The Answer message originator must ensure that this header contains the same value present in the corresponding request.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<para>
		The message contents (payload) is comprised of Attribute Value Pairs (AVPs), which also have their own header and data.
	</para>
	<figure>
		<title>Payload Structure</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-Introduction-dia-DiameterAVPLayout.png" format="PNG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<variablelist>
		<title>Payload AVPs</title>
		<varlistentry>
			<term>AVP Code</term>
			<listitem>
				<para>
					Uniquely identifies the attribute, by combining the specified code with the value contained within the Vendor-ID header field.
				</para>
				<para>
					AVP numbers 1 to 255 are reserved for RADIUS backwards compatibility, and do not require the Vendor-ID header field. AVP numbers 256 and above are used exclusively for the Diameter protocol, and are allocated by <orgname>IANA</orgname>
					.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>AVP Flags</term>
			<listitem>
				<para>
					Flags, which specify how each attribute must be handled. The first three bits are occupied with any one of the following values:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							V = Message is an error message.
						</para>
					</listitem>
					<listitem>
						<para>
							M = Message is proxiable.
						</para>
					</listitem>
					<listitem>
						<para>
							P = Message is a request.
						</para>
					</listitem>
				</itemizedlist>
				<para>
					The last 5 bits are reserved for future use, and should be set to <literal>0</literal>
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>AVP Length</term>
			<listitem>
				<para>
					Indicates the number of octets in the AVP, including the following information:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							AVP Code
						</para>
					</listitem>
					<listitem>
						<para>
							AVP Length
						</para>
					</listitem>
					<listitem>
						<para>
							AVP Flags
						</para>
					</listitem>
					<listitem>
						<para>
							Vendor-ID field (if present)
						</para>
					</listitem>
					<listitem>
						<para>
							AVP Data
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Vendor-ID</term>
			<listitem>
				<para>
					Optional field that identifies which application the message is applicable to. The application can be either an authentication, accounting, or vendor-specific application.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
</section>
</chapter>
	<chapter lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Installation</title>
	<para>
		Under Development
	</para>
	<section id="ira-Installing_Resource_Adapters" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Installing Resource Adapters</title>
	<para>
		Two options are available for installing Resource Adapters (RAs) that are compatible with Mobicents Diameter:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Installing from the binary
			</para>
		</listitem>
		<listitem>
			<para>
				Building from source code.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		For new users, it is recommended that you install the Base RA from the binary. If you are an advanced user, who is comfortable with building from source, you can choose to build the RA from source code.
	</para>
	<formalpara>
		<title>Install From The Binary</title>
		<para>
			The binary package is available from the Mobicents Diameter SourceForge page (<ulink url="http://sourceforge.net/projects/mobicents/files/Mobicents%20Diameter/">http://sourceforge.net/projects/mobicents/files/Mobicents%20Diameter/</ulink>)
		</para>
	</formalpara>
	<para>
		Select the Resource Adapter file that you want to install from the list, and download the archive.
	</para>
	<para>
		Extract the files and deploy the diameter-base-ra- <!-- TODO: Developer: Generic installation instructions need to be added for RAs -->
	</para>
</section>
</chapter>
	<chapter id="a-Architecture" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Architecture</title>
	<para>
		The Diameter architecture consists of the following core components:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Stack
			</para>
		</listitem>
		<listitem>
			<para>
				Multiplexer (MUX)
			</para>
		</listitem>
		<listitem>
			<para>
				Message Validator and Dictionary
			</para>
		</listitem>
	</itemizedlist>
	<section id="ds-Diameter_Stack" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Stack</title>
	<para>
		The Diameter Stack is the primary component of the Diameter solution. The Stack governs the mechanisms that control message sending and receiving, peer management, and session management. The stack manages these resources using State Machines.
	</para>
	<para>
		State Machines as defined in RFC 3588 are fully compatible with the Stack, while custom State Machines that handle different applications such as Sh, Ro, Rf, Cx, and Dx are also supported.
	</para>
	<note>
		<para>
			For more information about the different applications Diameter supports, refer to <xref linkend="chapter-Resource_Adapter_Components"/>.
		</para>
	</note>
	<section id="cts-Configuring_The_Stack" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuring the Stack</title>
	<para>
		The stack is configured using an XML file that contains the options set during initialization. The top level structure of the file is described below. Further explanation of each child element, and the applicable attributes is provided later in this section.
	</para>
	
<programlisting role="XML">&lt;Configuration xmlns="http://www.jdiameter.org/jdiameter-server"&gt;
      &lt;LocalPeer&gt;&lt;/LocalPeer&gt;
      &lt;Parameters&gt;&lt;/Parameters&gt;
      &lt;Network&gt;&lt;/Network&gt;
      &lt;Extensions&gt;&lt;/Extensions&gt;
      &lt;/Configuration&gt;
</programlisting>
	
<programlisting role="XML">&lt;LocalPeer&gt;
      &lt;URI value="aaa://localhost:1812"/&gt;
      &lt;IPAddresses&gt;
      &lt;IPAddress value="127.0.0.1"/&gt;
      &lt;/IPAddresses&gt;
      &lt;Realm value="mobicents.org"/&gt;
      &lt;VendorID value="193"/&gt;
      &lt;ProductName value="jDiameter"/&gt;
      &lt;FirmwareRevision value="1"/&gt;
      &lt;OverloadMonitor&gt;
      &lt;Entry index="1" lowThreshold="0.5" highThreshold="0.6"&gt;
      &lt;ApplicationID&gt;
      &lt;VendorId value="193"/&gt;
      &lt;AuthApplId value="0"/&gt;
      &lt;AcctApplId value="19302"/&gt;
      &lt;/ApplicationID&gt;
      &lt;/Entry&gt;
      &lt;/OverloadMonitor&gt;
      &lt;/LocalPeer&gt;
</programlisting>
	<para>
		The &lt;LocalPeer&gt; element contains parameters that affect the local Diameter peer. The available elements and attributes are listed for reference.
	</para>
	<variablelist>
		<title>&lt;LocalPeer&gt; Elements and Attributes</title>
		<varlistentry>
			<term>&lt;URI&gt;</term>
			<listitem>
				<para>
					Specifies the URI for the local peer.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;IPAddresses&gt;</term>
			<listitem>
				<para>
					Contains one or more child &lt;IPAddress&gt; elements that contain a single, valid IP address for the local peer.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;Realm&gt;</term>
			<listitem>
				<para>
					Specifies the realm of the local peer, using the <literal>value</literal> attribute.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;VendorID&gt;</term>
			<listitem>
				<para>
					Specifies a numeric identifier that corresponds to the vendor ID allocated by IANA.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;ProductName&gt;</term>
			<listitem>
				<para>
					Specifies the name of the local peer product name.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;FirmwareRevision&gt;</term>
			<listitem>
				<para>
					Specifies the version of the firmware.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;OverloadMonitor&gt;</term>
			<listitem>
				<para>
					Optional parent element containing child elements that specify settings relating to the Overload Monitor.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;Entry&gt;</term>
			<listitem>
				<para>
					Specifies three attributes that control the overload element index, overload low threshold and overload high threshold.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;ApplicationID&gt;</term>
			<listitem>
				<para>
					Parent element containing child elements that specify information about the application
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;AuthAppId&gt;</term>
			<listitem>
				<para>
					The Authentication Application ID.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;AcctAplId&gt;</term>
			<listitem>
				<para>
					The Account Application ID
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="XML">&lt;Parameters&gt;
      &lt;AcceptUndefinedPeer value="true"/&gt;
      &lt;DuplicateProtection value="true"/&gt;
      &lt;DuplicateTimer value="240000"/&gt;
      &lt;UseUriAsFqdn value="true"/&gt; &lt;!-- Needed for Ericsson SDK Emulator --&gt;
      &lt;QueueSize value="10000"/&gt;
      &lt;MessageTimeOut value="60000"/&gt;
      &lt;StopTimeOut value="10000"/&gt;
      &lt;CeaTimeOut value="10000"/&gt;
      &lt;IacTimeOut value="30000"/&gt;
      &lt;DwaTimeOut value="10000"/&gt;
      &lt;DpaTimeOut value="5000"/&gt;
      &lt;RecTimeOut value="10000"/&gt;
      &lt;/Parameters&gt;
</programlisting>
	<para>
		The &lt;Parameters&gt; element contains elements that specify parameters for the Diameter stack. The available elements and attributes are listed for reference.
	</para>
	<!-- TODO:  Developer: Need to obtain better definitions for the Parameter Elements and Attributes.  information present at the moment is not that helpful to readers. --> <variablelist>
		<title>&lt;Parameter&gt; Elements and Attributes</title>
		<varlistentry>
			<term>&lt;AcceptUndefinedPeer&gt;</term>
			<listitem>
				<para>
					Specifies whether the stack will accept connections from unidentified peers. The default value is <literal>false</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;DuplicateProtection&gt;</term>
			<listitem>
				<para>
					Specifies whether duplicate message protection is enabled. The default value is <literal>false</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;DuplicateTimer&gt;</term>
			<listitem>
				<para>
					Specifies the time each duplicate message is valid for. The default, minimum value is <literal>240000</literal> (4 minutes in milliseconds)
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;UseUriAsFqdn&gt;</term>
			<listitem>
				<para>
					Specifies whether the Ericsson SDK Emulator. The default value is <literal>true</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;QueueSize&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;MessageTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;StopTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;CeaTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;IacTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;DwaTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;DpaTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;RecTimeOut&gt;</term>
			<listitem>
				<para>
					In milliseconds
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="XML">&lt;Network&gt;
      &lt;Peers&gt;
      &lt;!-- This peer is a server, if it's a client attempt_connect should be set to false --&gt;
      &lt;Peer name="aaa://127.0.0.1:3868" attempt_connect="true" rating="1"/&gt;
      &lt;/Peers&gt;
      &lt;Realms&gt;
      &lt;Realm name="mobicents.org" peers="127.0.0.1" local_action="LOCAL" dynamic="false" exp_time="1"&gt;
      &lt;ApplicationID&gt;
      &lt;VendorId value="193"/&gt;
      &lt;AuthApplId value="0"/&gt;
      &lt;AcctApplId value="19302"/&gt;
      &lt;/ApplicationID&gt;
      &lt;/Realm&gt;
      &lt;/Realms&gt;
      &lt;/Network&gt;
</programlisting>
	<para>
		The &lt;Network&gt; element contains elements that specify parameters for external peers. The available elements and attributes are listed for reference.
	</para>
	<variablelist>
		<title>&lt;Network&gt; Elements and Attributes</title>
		<varlistentry>
			<term>&lt;Peers&gt;</term>
			<listitem>
				<para>
					Parent element containing child elements that specify external peers and the way they connect.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;Peer&gt;</term>
			<listitem>
				<para>
					Specifies the name of the external peer, whether the peer should be treated as a server or client, and what rating the peer has externally.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;Realms&gt;</term>
			<listitem>
				<para>
					Parent element containing child elements that specify all realms that connect into the Diameter network.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>&lt;Realm&gt;</term>
			<listitem>
				<para>
					Child element containing attributes and elements that describe the different realms configured for the Core.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<!-- TODO: Need more information about what might go into the extensions element. --> 
<programlisting>&lt;Extensions/&gt;
</programlisting>
</section>
	<section id="section-Stack_Example" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Stack Example</title>
	<para>
		Under Development
	</para>
</section>
	<section id="section-Stack_API_Usage" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Stack API Usage</title>
	<para>
		Under Development
	</para>
</section>
</section>
	<section id="dm-Diameter_Multiplexer" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Multiplexer</title>
	<para>
		The Multiplexer (MUX) is designed to provide a wrapper to the stack, which includes a simplified API. The Multiplexer provides the ability to register listeners to applications, making it possible to have more than one application sharing the same stack instance.
	</para>
	<para>
		Three components form the Multiplexer base architecture:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Multiplexer bean
			</para>
		</listitem>
		<listitem>
			<para>
				Message Validator
			</para>
		</listitem>
		<listitem>
			<para>
				Dictionary
			</para>
		</listitem>
	</itemizedlist>
	<para>
		For more information about the Message Validator and Dictionary, refer to <xref linkend="vad-Validator_and_Dictionary"/>
	</para>
	<section id="ctm-Configuring_The_Multiplexer" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuring the Multiplexer</title>
	<para>
		Configuring the Multiplexer requires configuration changes to the <filename>diameter-config.xml</filename> file. The <filename>diameter-config.xml</filename> file is a standard JDiameter configuration file, and forms the base configuration for all MUX listener applications.
	</para>
	<!-- TODO: Developer: So what changes specifically are required in the diameter-config.xml file. --> <para>
		By default, <filename>diameter-config.xml</filename> is located in the <filename>\default\deploy\mobicents-diameter-mux-<replaceable>[version_number]</replaceable>.sar\config\</filename> directory.
	</para>
	<para>
		It is not yet possible to change configuration in runtime, however this feature is planned for subsequent versions of the Multiplexer.
	</para>
</section>
	<section id="utm-Using_The_Multiplexer" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Using the Multiplexer</title>
	<para>
		To use the Diameter Multiplexer (MUX), deploy the SAR into the JBoss <filename>/deploy</filename> folder.
	</para>
	<para>
		To register an application as a listener, use the code example described in <xref linkend="example-Base_Listener_Code"/>.
	</para>
	<example id="example-Base_Listener_Code">
		<title>Base Listener Code</title>
		
<programlisting role="JAVA">package org.mobicents.slee.resource.diameter.base;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanServer;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import org.jboss.mx.util.MBeanServerLocator;
import org.jdiameter.api.Answer;
import org.jdiameter.api.ApplicationId;
import org.jdiameter.api.Request;
import org.mobicents.diameter.stack.DiameterListener;
import org.mobicents.diameter.stack.DiameterStackMultiplexerMBean;
public class MyDiameterApplication implements DiameterListener
{
  private DiameterStackMultiplexerMBean diameterMux = null;
  
  private DiameterStackMultiplexerMBean getMux() throws 
   InstanceNotFoundException, MBeanException, ReflectionException, 
   MalformedObjectNameException, NullPointerException

  {
    if(this.diameterMux == null)
    {
      MBeanServer server = MBeanServerLocator.locateJBoss();

      ObjectName diameterMultiplexerObjectName = new 
       ObjectName("diameter.mobicents:service=DiameterStackMultiplexer");

      Object[] params = new Object[]{};

      String[] signature = new String[]{};

      String operation = "getMultiplexerMBean";

      Object object = server.invoke(diameterMultiplexerObjectName, 
       operation, params, signature);

      if(object instanceof DiameterStackMultiplexerMBean)

      {
        this.diameterMux = (DiameterStackMultiplexerMBean) object;
      }
    }

    return this.diameterMux;

  }
  private void registerInMux()

  {

    ApplicationId shAppId = ApplicationId.createByAuthAppId(10415L, 
     16777217L);

    if(this.diameterMux != null)

    {
      this.diameterMux.registerListener(this, new 
       ApplicationId[]{shAppId});
    }

  }

  public Answer processRequest( Request request )

  {
    // Application-specific processing code goes here...

  }
  public void receivedSuccessMessage( Request request, Answer answer )

  {

    // Your processing code goes here...

  }

  public void timeoutExpired( Request request )

  {

    // Your processing code goes here...

  }

}
</programlisting>
	</example>
</section>
</section>
	<section id="vad-Validator_and_Dictionary" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Validator and Dictionary</title>
	<para>
		The Validator and Dictionary are core elements of the Diameter MUX stack.
	</para>
	<formalpara>
		<title>Validator</title>
		<para>
			The Diameter Validator provides message validation in accordance with industry standards. The primary purpose of the Validator is to detect malformed messages, such as an Answer message that contains a Destination-Host Attribute Value Pair (AVP).
		</para>
	</formalpara>
	<para>
		The Validator is capable of validating multi-leveled, grouped AVPs, excluding the following content types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				URI, or Identifier types.
			</para>
		</listitem>
		<listitem>
			<para>
				Enumerated types against defined values.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The Validator API is designed to perform validation of whole messages with reference to AVP consistency. Primarily, the Validator checks whether the AVP multiplicity is correct, and whether the position of the AVP is correct in a message. It does not verify enumerated content, or the AVP encoding type, with the provided definition.
	</para>
	<para>
		For future releases, user-initiated validation is planned. In addition, the validator is a JDiameter stack component, therefore it can be used at the application session level.
	</para>
	<formalpara>
		<title>Dictionary</title>
		<para>
			The Dictionary is used by the MUX to create and retrieve correctly configured messages and Attribute Value Pairs (AVPs) such as bit flags and AVP types.
		</para>
	</formalpara>
	<para>
		Because the Diameter dictionary is responsible for setting the parameters and flags, an application does not need to control this information. This results in applications that are more efficient. The dictionary also provides information that can be used for validation purposes.
	</para>
	<para>
		During runtime, the Dictionary API provides developers and users the ability to extract message information, and provides AVP definition flexibility. The definition can be changed without the need for the project source to be recompiled.
	</para>
	<section id="ctvad-Configuring_The_Validator_And_Dictionary" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuring the Validator and Dictionary</title>
	<para>
		The <filename>dictionary.xml</filename> file contains the configuration data for both the Validator and Dictionary components. The file is located in the <filename>/dictionary</filename> directory of the MUX:
	</para>
	<para>
		<filename>mobicents-diameter-mux-<replaceable>[version]</replaceable>.sar/lib/mobicents-diameter-mux-jar-<replaceable>[version]</replaceable>.jar/org/mobicents/diameter/dictionary/dictionary.xml</filename>
	</para>
	<para>
		When the MUX component creates the stack, the validator and dictionary are both started and configured, based on the <filename>dictionary.xml</filename> file present in the MUX classpath. The advantage of using the same file for the validator and dictionary is that there is no way to introduce configuration mistakes between components. If the <filename>dictionary.xml</filename> file contains incorrect settings, these settings may affect both components. Therefore, be careful when setting the parameters, which are explained below for reference.
	</para>
	<para>
		The basic XML structure of the <filename>dictionary.xml</filename> file is described below. All elements are mandatory, and contain a number of attributes that set the parameters for the Validator and Dictionary.
	</para>
	
<programlisting role="XML">&lt;dictonary&gt;
  &lt;validator enabled="true|false"/&gt;
  &lt;vendor name="" vendor-id="" code=""/&gt;
  &lt;typedefn type-name="" type-parent=""/&gt;
  &lt;application id="" name=""&gt;
    &lt;avp ...&gt;
      &lt;type type-name=""/&gt;
      &lt;enum name="" code=""/&gt;
      &lt;grouped&gt;
        &lt;gapd name=""/&gt;
      &lt;grouped/&gt;
    &lt;avp/&gt;
    &lt;command name="" code="" request="true|false"/&gt;
      &lt;avp ...&gt;
        &lt;type type-name=""/&gt;
        &lt;enum name="" code=""/&gt;
        &lt;grouped&gt;
          &lt;gapd name=""/&gt;
        &lt;grouped/&gt;
      &lt;avp/&gt;
  &lt;application&gt;
&lt;dictionary/&gt;
</programlisting>
	<formalpara>
		<title>&lt;dictionary&gt;</title>
		<para>
			The root element,which contains the child elements comprising the validator and dictionary components. This element does not support any attributes.
		</para>
	</formalpara>
	<formalpara>
		<title>&lt;validator/&gt;</title>
		<para>
			Specifies whether message validation is activated for sent and received stack messages. The element supports the following optional attribute:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>enabled</term>
			<listitem>
				<para>
					Specifies whether the validator is activated or deactivated. If not specified, the validator is deactivated.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<title>&lt;vendor/&gt;</title>
		<para>
			Optional element, which specifies the mapping between the vendor name, vendor ID, and vendor code. The element supports the following required attributes:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>name</term>
			<listitem>
				<para>
					Specifies the vendor name. For example "Hewlett Packard".
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>vendor-id</term>
			<listitem>
				<para>
					Specifies the unique ID associated with this vendor. For example, "HP".
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>code</term>
			<listitem>
				<para>
					Specifies the alpha-numeric code allocated to the vendor. For example "11". The value must be unique for each &lt;vendor&gt; declaration.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<example id="example-Vendor_XML_Attributes">
		<title>&lt;vendor&gt; XML Attributes</title>
		
<programlisting role="XML">...
&lt;vendor vendor-id="None" code="0" name="None" /&gt;
&lt;vendor vendor-id="HP" code="11" name="Hewlett Packard" /&gt;
&lt;vendor vendor-id="Merit" code="61" name="Merit Networks" /&gt;
&lt;vendor vendor-id="Sun" code="42" name="Sun Microsystems, Inc." /&gt;
&lt;vendor vendor-id="USR" code="429" name="US Robotics Corp." /&gt;
&lt;vendor vendor-id="3GPP2" code="5535" name="3GPP2" /&gt;
&lt;vendor vendor-id="TGPP" code="10415" name="3GPP" /&gt;
&lt;vendor vendor-id="TGPPCX" code="16777216" name="3GPP CX/DX" /&gt;
&lt;vendor vendor-id="TGPPSH" code="16777217" name="3GPP SH" /&gt;
&lt;vendor vendor-id="Ericsson" code="193" name="Ericsson" /&gt;
&lt;vendor vendor-id="ETSI" code="13019" name="ETSI" /&gt;
&lt;vendor vendor-id="Vodafone" code="12645" name="Vodafone" /&gt;
</programlisting>
	</example>
	<!-- TODO:  Developer:  Correct the <typedefn> section so it meets RFC 3588 requirements. --> <formalpara>
		<title>&lt;typedefn/&gt;</title>
		<para>
			Defines the simple Attribute Value Pair (AVP) types. The element supports the following required attributes:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>type-name</term>
			<listitem>
				<para>
					Specifies a type name in accordance with the acceptable base types defined in RFC 3588. For example; "Enumerated", "OctetString", "Integer32".
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>type-parent</term>
			<listitem>
				<para>
					Specifies the parent type name used to define the base characteristics of the type. The values are restricted to defined &lt;typedefn&gt; elements. For example; "OctetString", "UTF8String", "IPAddress".
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<example id="example-Typedefn_XML_Attributes">
		<title>&lt;typedefn&gt; XML Attributes</title>
		
<programlisting role="XML">&lt;typedefn type-name="OctetString" /&gt;
&lt;typedefn type-name="UTF8String" type-parent="OctetString" /&gt;
&lt;typedefn type-name="IPAddress" type-parent="OctetString" /&gt;
&lt;typedefn type-name="Integer32" /&gt;
&lt;typedefn type-name="Integer64" /&gt;
&lt;typedefn type-name="VendorId" type-parent="Unsigned32" /&gt;
&lt;typedefn type-name="AppId" type-parent="Unsigned32" /&gt;
&lt;typedefn type-name="Float64" /&gt;
&lt;typedefn type-name="Unsigned32" /&gt;
&lt;typedefn type-name="Unsigned64" /&gt;
&lt;typedefn type-name="Time" /&gt;
&lt;typedefn type-name="Enumerated" type-parent="Integer32" /&gt;
&lt;typedefn type-name="DiameterURI" type-parent="UTF8String" /&gt;
</programlisting>
	</example>
	<formalpara>
		<title>&lt;application&gt;</title>
		<para>
			Defines the specific applications used within the dictionary. Two child elements are supported by &lt;application&gt;: &lt;avp&gt;, and &lt;command&gt;. The &lt;application&gt; element supports the following attributes:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>id</term>
			<listitem>
				<para>
					Specifies the unique ID allocated to the application. The attribute is used in all messages and forms part of the message header.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>name</term>
			<listitem>
				<para>
					Optional attribute, which specifies the logical name of the application for configurers.
				</para>
			</listitem>
		</varlistentry>
		<!-- TODO: Developer: In the code examples on mobicents-public, there is the uri parameter.  While not mentioned in the attributes, is it still a valid addition to the <application> tag? --> <varlistentry>
			<term>uri</term>
			<listitem>
				<para>
					Optional attribute, which specifies a link to additional application information.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<example id="example-Application_XML_Attributes">
		<title>&lt;application&gt; XML Attributes</title>
		
<programlisting role="XML">&lt;application id="16777216" name="3GPP Cx/Dx"  
 uri="http://www.ietf.org/rfc/rfc3588.txt?number=3588"&gt;
</programlisting>
	</example>
	<formalpara>
		<title>&lt;avp&gt;</title>
		<para>
			Element containing information necessary to configure the Attribute Value Pairs. <xref linkend="table-avp_attributes"/> contains the complete list of supported attributes, and their available values (if applicable).
		</para>
	</formalpara>
	<para>
		The &lt;avp&gt; element supports a number of child elements, which are used to set finer parameters for the individual AVP. The supported elements are &lt;type&gt;, &lt;enum&gt;, and &lt;grouped&gt;.
	</para>
	<note>
		<para>
			Different sets of elements are supported by &lt;avp&gt; depending on its position in the dictionary.xml file.
		</para>
	</note>
	<example id="example-Avp_Child_Elements_And_Attributes">
		<title>&lt;avp&gt; Child Elements and Attributes</title>
		
<programlisting role="XML">&lt;avp name="Server-Assignment-Type" code="614" mandatory="must" vendor-bit="must" 
 vendor-id="TGPP" may-encrypt="no"&gt;
   &lt;type type-name="Unsigned32" /&gt;
   &lt;enum name="NO_ASSIGMENT" code="0" /&gt;
   &lt;enum name="REGISTRATION" code="1" /&gt;
   &lt;enum name="RE_REGISTRATION" code="2" /&gt;
   &lt;enum name="UNREGISTERED_USER" code="3" /&gt;
   &lt;grouped&gt;
     &lt;gavp name="SIP-Item-Number" multiplicity="0-1"/&gt;
     &lt;gavp name="SIP-Authentication-Scheme" multiplicity="0-1"/&gt;
     &lt;gavp name="SIP-Authenticate" multiplicity="0-1"/&gt;         
     &lt;gavp name="Line-Identifier" multiplicity="0+"/&gt;
   &lt;/grouped&gt;
&lt;/avp&gt;
</programlisting>
	</example>
	<formalpara>
		<title>&lt;type&gt;</title>
		<para>
			Child element of &lt;avp&gt;, which is used to match the AVP with the AVP type as defined in the &lt;typedefn&gt; element. The element supports the following mandatory attribute:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>type-name</term>
			<listitem>
				<para>
					Specifies the type name, which is used to match to the type-name value specified in the &lt;typedefn&gt; element.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note>
		<para>
			&lt;type&gt; is ignored if the &lt;avp&gt; element contains the &lt;grouped&gt; element.
		</para>
	</note>
	<formalpara>
		<title>&lt;enum&gt;</title>
		<para>
			Child element of &lt;avp&gt;, which specifies the enumeration value for the specified AVP. &lt;enum&gt; is used only when the type-name attribute of &lt;type&gt; is specified. The element supports the following mandatory attributes:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>name</term>
			<listitem>
				<para>
					Specifies the name of a constant value that applies to the AVP.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>code</term>
			<listitem>
				<para>
					Specifies the integer value associated with the name of the constant. The value is passed as a a value of the AVP, and maps to the name attribute.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note>
		<para>
			&lt;enum&gt; is ignored if the &lt;avp&gt; element contains the &lt;grouped&gt; element.
		</para>
	</note>
	<formalpara>
		<title>&lt;grouped&gt;</title>
		<para>
			Child element of &lt;avp&gt;, which specifies the AVP is a grouped type. A grouped AVP is one that has no &lt;typedefn&gt; element present). The element does not support any attributes, however the &lt;gavp&gt; element is allowed as a child element.
		</para>
	</formalpara>
	<formalpara>
		<title>&lt;gavp&gt;</title>
		<para>
			Child element of &lt;grouped&gt;, which specifies a reference to a grouped AVP. The element supports one mandatory attribute:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>name</term>
			<listitem>
				<para>
					Specifies the name of the grouped AVP member. The value must match the defined AVP name.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<!-- TODO: Developer:  Ensure the attributes in the AVP table are correct according to the allowed child elements and conditions. --> <table frame="all" id="table-avp_attributes" pgwide="1">
		<title>&lt;avp&gt; Attributes</title>
		<tgroup cols="3" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<thead>
				<row>
					<entry>
						Attribute Name (optional in brackets)
					</entry>
					<entry>
						Explicit Values (default in brackets)
					</entry>
					<entry>
						Description
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						name
					</entry>
					<entry>
					</entry>
					<entry>
						Specifies the name of the AVP, which is used to match the AVP definition to any grouped AVP references. For further information about grouped AVPs, refer to the element description in this section.
					</entry>
				</row>
				<row>
					<entry>
						code
					</entry>
					<entry>
					</entry>
					<entry>
						Specifies the integer code of the AVP.
					</entry>
				</row>
				<row>
					<entry>
						(vendor-id)
					</entry>
					<entry>
						(none)
					</entry>
					<entry>
						Used to match the vendor ID reference to the value defined in the &lt;vendor&gt; element.
					</entry>
				</row>
				<row>
					<entry>
						(multiplicity)
					</entry>
					<entry>
					</entry>
					<entry>
						Specifies the number of acceptable AVPs in a message using an explicit value.
					</entry>
				</row>
				<row>
					<entry>
					</entry>
					<entry>
						0
					</entry>
					<entry>
						An AVP <emphasis>must not</emphasis> be present in the message.
					</entry>
				</row>
				<row>
					<entry>
					</entry>
					<entry>
						(0+)
					</entry>
					<entry>
						Zero or more instances of the AVP <emphasis>must be</emphasis> present in the message.
					</entry>
				</row>
				<row>
					<entry>
					</entry>
					<entry>
						0-1
					</entry>
					<entry>
						Zero, or one instance of the AVP <emphasis>may be</emphasis> present in the message. An error occurs if the message contains more than one instance of the AVP.
					</entry>
				</row>
				<row>
					<entry>
					</entry>
					<entry>
						1
					</entry>
					<entry>
						One instance of the AVP <emphasis>must be</emphasis> present in the message.
					</entry>
				</row>
				<row>
					<entry>
					</entry>
					<entry>
						1+
					</entry>
					<entry>
						At least one instance of the AVP <emphasis>must be</emphasis> present in the message.
					</entry>
				</row>
				<row>
					<entry>
						index
					</entry>
					<entry>
					</entry>
					<entry>
						Specifies the index in a message. Only the SessionId AVP supports a fixed index, which starts at 0. If the index location is not important, -1 must be specified manually.
					</entry>
				</row>
				<row>
					<entry>
						may-encrypt
					</entry>
					<entry>
						Yes | (No)
					</entry>
					<entry>
						Specifies whether the AVP can be encrypted.
					</entry>
				</row>
				<row>
					<entry>
						protected
					</entry>
					<entry>
						may | must | mustnot
					</entry>
					<entry>
						Determines TODO.
					</entry>
				</row>
				<row>
					<entry>
						vendor-bit
					</entry>
					<entry>
						must | mustnot
					</entry>
					<entry>
						Specifies whether the Vendor ID should be set.
					</entry>
				</row>
				<row>
					<entry>
						mandatory
					</entry>
					<entry>
						may | must | mustnot
					</entry>
					<entry>
						Determines TODO.
					</entry>
				</row>
				<row>
					<entry>
						vendor
					</entry>
					<entry>
					</entry>
					<entry>
						Specifies the defined vendor code, which is used by the &lt;command&gt; child element.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<example id="example-Avp_XML_Attributes">
		<title>&lt;avp&gt; XML Attributes</title>
		
<programlisting role="XML">&lt;!-- MUST --&gt;

&lt;avp name="Session-Id" code="263" vendor="0" multiplicity="1" index="0" /&gt;
&lt;avp name="Auth-Session-State" code="277" vendor="0" multiplicity="1" index="-1" /&gt;

&lt;!-- MAY --&gt;

&lt;avp name="Destination-Host" code="293" vendor="0" multiplicity="0-1" index="-1" /&gt;
&lt;avp name="Supported-Features" code="628" vendor="10415" multiplicity="0+" index="-1" /&gt;

&lt;!-- FORBBIDEN --&gt;

&lt;avp name="Auth-Application-Id" code="258" vendor="0" multiplicity="0" index="-1" /&gt;
&lt;avp name="Error-Reporting-Host" code="294" vendor="0" multiplicity="0" index="-1" /&gt;
</programlisting>
	</example>
	<formalpara>
		<title>&lt;command&gt;</title>
		<para>
			Specifies the command for the application. The element supports the &lt;avp&gt; element, which specifies the structure of the command. The element supports the following attributes:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>name</term>
			<listitem>
				<para>
					Optional parameter, which specifies the message name for descriptive purposes.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>code</term>
			<listitem>
				<para>
					Mandatory parameter, which specifies the integer code of the message.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>request</term>
			<listitem>
				<para>
					Mandatory parameter, which specifies whether the declared command is a request or answer. The available values are "true" (request) or "false" (answer).
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note>
		<para>
			If the &lt;avp&gt; element is specified in &lt;command&gt; it does not support any child elements. The &lt;avp&gt; element only refers to defined AVPs when used in this context.
		</para>
	</note>
	<example id="example-Command_Elements_And_Attributes">
		<title>&lt;command&gt; Elements and Attributes</title>
		
<programlisting>&lt;command name="User-Authorization" code="300" vendor-id="TGPP" request="true"&gt;
  &lt;avp name="Server-Assignment-Type" code="614" mandatory="must" vendor-bit="must" 
   vendor-id="TGPP" may-encrypt="no"/&gt;
&lt;/command&gt;
</programlisting>
	</example>
</section>
	<section id="utvad-Using_The_Validator_And_Dictionary" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Using the Validator and Dictionary</title>
	<para>
		To use the Diameter Validator, and Dictionary, the following prerequisites are required:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				An instance of the Validator
			</para>
		</listitem>
		<listitem>
			<para>
				A correctly configured <filename>dictionary.xml</filename> file.
			</para>
		</listitem>
	</itemizedlist>
	<note>
		<para>
			If the file is not the default <filename>dictionary.xml</filename> file, the changes to the validator and dictionary will be global for the Java Virtual Machine (JVM)
		</para>
	</note>
	<formalpara>
		<title>API Methods</title>
		<para>
			Currently, the API for the Validator and Dictionary defines the following methods:
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>public void validate(Message msg) </term>
			<listitem>
				<para>
					If the validator is activated, the method attempts to perform the specified operation on the passed message. If validation fails, the method returns <literal>JAvpNotAllowedException</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public void validate(int commandCode, long appId, boolean isRequest, AvpSet destination, Avp avp)</term>
			<listitem>
				<para>
					If the validator is activated, the method performs validation against the passed AVP. The AvpSet parameter relates to the messages the specified AVP set.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public boolean isCountValidForMultiplicity(int commandCode, long appId, boolean isRequest, AvpSet destination, int avpCode, long avpVendor)</term>
			<listitem>
				<para>
					Determines if AVP count is valid in the passed set. The message is determined by <literal>commandCode</literal>, <literal>appId</literal> and <literal>isRequest</literal>.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public boolean isAllowed(int commandCode, long appId, boolean isRequest, int avpCode, long avpVendor)</term>
			<listitem>
				<para>
					Determines if AVP multiplicity count is not 0.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>public boolean hasRepresentation(int commandCode, long appId, boolean isRequest, int avpCode, long avpVendor)</term>
			<listitem>
				<para>
					Determines whether there is a message present, and if the message contains the correct AVPs. Returns <literal>false</literal> if one or both of the requirements are not met.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note>
		<para>
			In addition to the API methods, <literal>public static final DiameterMessageValidator getInstance()</literal> and <literal>public boolean isOn()</literal>are compatible.
		</para>
	</note>
	<example id="example-Validator_And_Dictionary_Code_Example">
		<title>Validator and Dictionary Code Example</title>
		
<programlisting role="JAVA">if (!validator.isOn())
                return;

if (!validator.isAllowed(msg.getCommandCode(), msg.getApplicationId(), msg.isRequest(), 
    avpCode, vendorId)) {
   throw new AvpNotAllowedException("Avp defined by code: " + avpCode + ",
    vendorId: " + vendorId + " is not allowed in message - code: " + 
    msg.getCommandCode() + ", appId: "
         + msg.getApplicationId() + ", isRequest: " + msg.isRequest(), avpCode, 
          vendorId);
}

if (validator.hasRepresentation(msg.getCommandCode(), msg.getApplicationId(), 
    msg.isRequest(), avpCode, vendorId)) {
         // we are allowed to add this to msg
         if (validator.isCountValidForMultiplicity(msg.getCommandCode(),
             msg.getApplicationId(), msg.isRequest(), msg.getAvps(), 
             avpCode, vendorId)) {
         // its ok.
             return;
} else if (isAvpRemoveAllowed()) {
         // lets remove some avps.
} else {
      throw new AvpNotAllowedException("Avp not allowed, count exceeded.",
       avpCode, vendorId);
         }
} else
    {
    //Default we dont do a thing.
}
</programlisting>
	</example>
	<example id="example-Validator_Message_Check_Example">
		<title>Validator Message Check Example</title>
		<para>
			The example below is pseudo-code.
		</para>
		
<programlisting role="JAVA">...
DiameterMessageValidator messageValidator = 
 DiameterMessageValidator.getInstance();
Message message = createMessage(<replaceable>XXX</replaceable>.MESSAGE_CODE,isRequest, applicationId);
        
//add AVPs
...
try{
   messageValidator.validate(message);
}catch(JAvpNotAllowedException e)
{
    System.err.println("Failed to validate ...., avp code: "+e.getAvpCode()" avp vendor:"+
     e.getVendorId()+", message:"+ e.getMessage();
}
</programlisting>
	</example>
	<example id="example-Validator_Multiplicity_Count_Check_Example">
		<title>Validator Multiplicity Count Check Example</title>
		<para>
			The example below is pseudo-code.
		</para>
		
<programlisting role="JAVA">...

DiameterMessageValidator messageValidator = 
 DiameterMessageValidator.getInstance();
Message message = createMessage(<replaceable>XXX</replaceable>.MESSAGE_CODE,isRequest, applicationId);
        
//add AVPs

...

if (validator.isCountValidForMultiplicity(message.getCommandCode(), message.getApplicationId(), 
 message.isRequest(), message.getAvps(), avpCode, vendorId)) {

// its ok.
       
} else  {
      
  throw new Exception("Error");
}
</programlisting>
	</example>
	<!-- TODO: Developer:  Explain what _DEFAULT_MANDATORY and _DEFALUT_PROTECTED mean in the example.  Choose whether to put the information before the example, or include it within the example itself. --> <example id="example-Dictionary_Base_Code">
		<title>Dictionary Base Code</title>
		<para>
			The example below is pseudo-code.
		</para>
		
<programlisting role="JAVA">public static  void setAvpAsFloat32(Message msg, int avpCode, long
 vendorId, AvpSet set, float value)
  {
    AvpRepresentation rep = AvpDictionary.INSTANCE.getAvp(avpCode,
     vendorId);

    if (rep != null) {
        set.addAvp(avpCode, value, vendorId, isMandatory, isProtected);
    }
    else {
       set.addAvp(avpCode, value, vendorId,  _DEFAULT_MANDATORY,
        _DEFAULT_PROTECTED);
   
    }
  }
</programlisting>
	</example>
	<example id="example-Dictionary_AVP_Encoding_Example">
		<title>Dictionary AVP Encoding Example</title>
		<para>
			In this example the AVP types, and some default values, inherit.
		</para>
		
<programlisting role="JAVA">public static  void setAvp(Message msg, int avpCode, long vendorId, AvpSet set, float value)
  {
  AvpRepresentation rep = AvpDictionary.INSTANCE.getAvp(avpCode, vendorId);
        
    if (rep != null) {
        
    if(rep.getType().equals("Enumerated"))
      {
      setAvpAsUnsigned32(avpCode, vendorId, set, rep.isMandatory(), rep.isProtected(), value);
      }else if(rep.getType().equals("OctetString") || 
       rep.getType().equals("IPAddress") || 
       rep.getType().equals("DiameterIdentity"))
      {
      setAvpAsOctetString(avpCode, vendorId, set, rep.isMandatory(),
rep.isProtected(), value);
      }
  }
        
}
</programlisting>
	</example>
</section>
</section>
</chapter>
	<chapter id="chapter-Resource_Adapter_Components" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Components</title>
	<para>
		Diameter provides the following Resource Adapter (RA) components that are used to connect to the JAIN SLEE Server:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Base
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Sh (Client)
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Sh (Server)
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Ro
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter Rf
			</para>
		</listitem>
		<listitem>
			<para>
				Mobicents Diameter CCA
			</para>
		</listitem>
	</itemizedlist>
	<section id="db-Diameter_Base" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Base</title>
	<para>
		The Base RA provides the Base application layer to SLEE, and base factories to resource adapters in other applications. Therefore Base is a dependency for any other Diameter resource adapter.
	</para>
	<para>
		The Base RA is responsible for managing the connection between peers and provides basic authentication, accounting, and session management. Diameter Base can be extended to function with other applications because its factories provide methods for creating raw messages and AVPs. In order for the application to be compliant with the specification, state machines should be implemented at some level within the implementation.
	</para>
	<para>
		Diameter Base provides a number of message commands that can be used within the application.
	</para>
	<table frame="all" id="table-Diameter_Messages" pgwide="1">
		<title>Diameter Messages</title>
		<tgroup cols="4" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Class
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						Abort-Session-Request
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						ASR
					</entry>
					<entry>
						274
					</entry>
				</row>
				<row>
					<entry>
						Abort-Session-Answer
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						ASA
					</entry>
					<entry>
						274
					</entry>
				</row>
				<row>
					<entry>
						Accounting-Request
					</entry>
					<entry>
						Accounting
					</entry>
					<entry>
						ACR
					</entry>
					<entry>
						271
					</entry>
				</row>
				<row>
					<entry>
						Accounting-Answer
					</entry>
					<entry>
						Accounting
					</entry>
					<entry>
						ACA
					</entry>
					<entry>
						271
					</entry>
				</row>
				<row>
					<entry>
						Capabilities-Exchange-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						CER
					</entry>
					<entry>
						257
					</entry>
				</row>
				<row>
					<entry>
						Capabilities-Exchange-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						CEA
					</entry>
					<entry>
						257
					</entry>
				</row>
				<row>
					<entry>
						Device-Watchdog-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DWR
					</entry>
					<entry>
						280
					</entry>
				</row>
				<row>
					<entry>
						Device-Watchdog-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DWA
					</entry>
					<entry>
						280
					</entry>
				</row>
				<row>
					<entry>
						Disconnect-Peer-Request
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DPR
					</entry>
					<entry>
						282
					</entry>
				</row>
				<row>
					<entry>
						Disconnect-Peer-Answer
					</entry>
					<entry>
						Peer Management
					</entry>
					<entry>
						DPA
					</entry>
					<entry>
						282
					</entry>
				</row>
				<row>
					<entry>
						Re-Auth-Request
					</entry>
					<entry>
						Authentication
					</entry>
					<entry>
						RAR
					</entry>
					<entry>
						258
					</entry>
				</row>
				<row>
					<entry>
						Re-Auth-Answer
					</entry>
					<entry>
						Authentication
					</entry>
					<entry>
						RAA
					</entry>
					<entry>
						258
					</entry>
				</row>
				<row>
					<entry>
						Session-Termination-Request
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						STR
					</entry>
					<entry>
						275
					</entry>
				</row>
				<row>
					<entry>
						Session-Termination-Answer
					</entry>
					<entry>
						Session Management
					</entry>
					<entry>
						STA
					</entry>
					<entry>
						275
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<section id="dac-Diameter_Base_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		Base RA entity supports four configuration properties that must be correctly configured before the RA can function correctly. RA supports two configuration properties, one for authentication applications and one for accounting applications.
	</para>
	<para>
		The following named properties are available for the Base RA:
	</para>
	<para>
		<itemizedlist>
			<listitem>
				<para>
					authApplicationIds
				</para>
			</listitem>
			<listitem>
				<para>
					acctApplicationIds
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		The configuration properties can be configured using the following methods:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Using Java XML Mapping (JXM) operations, available through the Management Console.
			</para>
		</listitem>
		<listitem>
			<para>
				Manually declaring the property pairs in the <filename>resource-adaptor-jar.xml</filename> file within the <filename>base-ra-<replaceable>[version]</replaceable>-DU.jar</filename>, <filename>base-ra-<replaceable>[version]</replaceable>.jar</filename>, or <filename>META-INF</filename> files.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Each property consists of value pairs. Value pairs are separated from each other with "," <!-- TODO: Developer: add markup here for &quot;,&quot; -->. Each value pair consists of two long numbers separated with ":". First number indicate vendor of supported application. Second is application id arbitrary assigned by IANA.
	</para>
	<para>
		Each value pair identifies application that Base RA should advertise as supported. Some application do not have vendor assigned. In this case "0" is to be used as vendor id.
	</para>
	<example id="example-Diameter_Base_Configuring">
		<title>Configuring </title>
		<para>
			The following XML sample demonstrates how to configure an authentication application and two accounting applications in the <filename>resource-adaptor-jar.xml</filename>. Note that each configuration property pair contains an equal value pair length.
		</para>
		
<programlisting role="XML">&lt;config-property&gt;
    &lt;description&gt;List of supported Authorization Application Ids in form of {vendor}:{application-id}, separated by comma (',')&lt;/description&gt;
    &lt;config-property-name&gt;authApplicationIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;193:19302&lt;/config-property-value&gt;
&lt;/config-property&gt;

&lt;config-property&gt;
    &lt;description&gt;List of supported Accounting Application Ids in form of {vendor}:{application-id}, separated by comma (',')&lt;/description&gt;
    &lt;config-property-name&gt;acctApplicationIds&lt;/config-property-name&gt;
    &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;
    &lt;config-property-value&gt;0:0, 193:19302&lt;/config-property-value&gt;
&lt;/config-property&gt;
</programlisting>
	</example>
</section>
	<section id="dbrat-Diameter_Base_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		The resource adapter provides the following types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. In the case of a subscription activity, the activity timeout is taken into consideration because the subscription may be time-based.
	</para>
	<variablelist>
		<title>Diameter Base Activities</title>
		<varlistentry>
			<term>AccountingClientSessionActivity</term>
			<listitem>
				<para>
					Client accounting activity, which is created for each ACR request. The activity ends when an answer is received, or the request times out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingRequest;

public interface AccountingClientSessionActivity extends
                AccountingSessionActivity {

        /**
         * Send Account Request to Server
         * @param request
         * @throws IOException 
         */
         void   sendAccountRequest(AccountingRequest request) throws IOException;        
}
</programlisting>
	<variablelist>
		<varlistentry>
			<term>AuthClientSessionActivity</term>
			<listitem>
				<para>
					Client authorization activity, which is created for each RAR request. The activity ends when an answer is received, or the request times out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionAnswer;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthAnswer;
import net.java.slee.resource.diameter.base.events.SessionTerminationRequest;

public interface AuthClientSessionActivity extends AuthSessionActivity{

        /**
         * Send abort session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendAbortSessionAnswer(AbortSessionAnswer answer) throws IOException;

        /**
         * Send authentication session request to server FIXME: baranowb; whats
         * this?
         *
         * @param request
         * @throws IOException
         */
        void sendAuthRequest(DiameterMessage request) throws IOException;

        /**
         * Send re-authentication session answer to server
         *
         * @param answer
         * @throws IOException
         */
        void sendReAuthAnswer(ReAuthAnswer answer) throws IOException;

        /**
         * Send session termination request to server
         *
         * @param request
         * @throws IOException
         */
        void sendSessionTerminationRequest(SessionTerminationRequest request) throws IOException;
       
}
</programlisting>
	<variablelist>
		<varlistentry>
			<term>AccountingServerSessionActivity</term>
			<listitem>
				<para>
					Server accounting activity, which is created for each ACR request. The activity ends when an answer is sent, or the request times out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AccountingAnswer;

public interface AccountingServerSessionActivity extends
                AccountingSessionActivity {

        /**
         * Sends generated answer back to client
         * @param answer
         * @throws IOException
         */
        void sendAccountAnswer(AccountingAnswer answer) throws IOException;

        
}
</programlisting>
	<variablelist>
		<varlistentry>
			<term>AuthServerSessionActivity</term>
			<listitem>
				<para>
					Server authorization activity, which is created for each RAR request. The activity ends when an answer is sent, or the request times out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">package net.java.slee.resource.diameter.base;

import java.io.IOException;

import net.java.slee.resource.diameter.base.events.AbortSessionRequest;
import net.java.slee.resource.diameter.base.events.DiameterMessage;
import net.java.slee.resource.diameter.base.events.ReAuthRequest;
import net.java.slee.resource.diameter.base.events.SessionTerminationAnswer;

public interface AuthServerSessionActivity extends AuthSessionActivity {

        /**
         * Send session abort session request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendAbortSessionRequest(AbortSessionRequest request) throws IOException;

        /**
         * Send authenticate answer to client
         * 
         * @param answer
         * @throws IOException 
         */
        void sendAuthAnswer(DiameterMessage answer) throws IOException;

        /**
         * Send re-authenticate request to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendReAuthRequest(ReAuthRequest request) throws IOException;

        /**
         * Send session termination answer to client
         * 
         * @param request
         * @throws IOException 
         */
        void sendSessionTerminationAnswer(SessionTerminationAnswer request) throws IOException;

}
</programlisting>
	<formalpara>
		<title>Provider</title>
		<para>
			Provider defines the basic features that must be supported by all other providers. Service Building Blocks (SBBs) create activities on demand and retrieve AVP and message factories. The connection information is retrieved from the connected peers.
		</para>
	</formalpara>
	<!-- TODO:  Developer:  I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.   --> <para>
		The API for the DiameterProvider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterProvider.java">DiameterProvider.java in the source code</ulink>.
	</para>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
		</para>
	</formalpara>
	<para>
		The API for the DiameterMessageFactory is more than 300 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/base/ratype/src/main/java/net/java/slee/resource/diameter/base/DiameterMessageFactory.java">DiameterMessageFactory.java in the source code</ulink>.
	</para>
</section>
	<section id="dbaue-Diameter_Base_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		The following examples demonstrate basic usage examples for the Resource Adapter (RA) API.
	</para>
	<example id="example-Diameter_Base_Send_ACR">
		<title>Send ACR</title>
		<para>
			The following code demonstrates how to configure a Send ACR.
		</para>
		
<programlisting role="JAVA">AccountingClientSessionActivity activity = 
 provider.createAccountingActivity();

List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

avps.add(avpFactory.createAvp(Avp.SESSION_ID,
 activity.getSessionId().getBytes()));

DiameterAvp avpVendorId = avpFactory.createAvp(Avp.VENDOR_ID, 193);

DiameterAvp avpAcctApplicationId = avpFactory.createAvp(Avp.
 ACCT_APPLICATION_ID, 19302);

avps.add(avpFactory.createAvp(Avp.VENDOR_SPECIFIC_APPLICATION_ID, 
 new DiameterAvp[] { avpVendorId, avpAcctApplicationId }));

avps.add(avpFactory.createAvp(Avp.ORIGIN_HOST,
 "aaa://127.0.0.1:1812".getBytes()));

avps.add(avpFactory.createAvp(Avp.ORIGIN_REALM,
 "mobicents.org".getBytes()));

avps.add(avpFactory.createAvp(Avp.DESTINATION_HOST,
 "aaa://127.0.0.1:21812".getBytes()));
            
avps.add(avpFactory.createAvp(Avp.DESTINATION_REALM,
 "mobicents.org".getBytes()));

// Subscription ID
DiameterAvp subscriptionIdType = avpFactory.createAvp(193, 555, 0);
 DiameterAvp subscriptionIdData = avpFactory.createAvp(193, 554, 
 "00001000");
            
avps.add(avpFactory.createAvp(193, 553, new DiameterAvp[] {
 subscriptionIdType, subscriptionIdData }));

// Requested Service Unit
DiameterAvp unitType = avpFactory.createAvp(193, 611, 2);

DiameterAvp valueDigits = avpFactory.createAvp(193, 617, 10L);

DiameterAvp unitValue = avpFactory.createAvp(193, 612, 
 new DiameterAvp[] { valueDigits });
            
avps.add(avpFactory.createAvp(193, 606, new DiameterAvp[] { unitType, unitValue }));

// Record Number and Type
avps.add(avpFactory.createAvp(Avp.ACC_RECORD_NUMBER, 0));

avps.add(avpFactory.createAvp(Avp.ACC_RECORD_TYPE, 1));

// Requested action
avps.add(avpFactory.createAvp(193, 615, 0));

// Service Parameter Type
DiameterAvp serviceParameterType = avpFactory.createAvp(193, 608, 0);

DiameterAvp serviceParameterValue = avpFactory.createAvp(193, 609, "510");

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType, serviceParameterValue }));

// Service Parameter Type
DiameterAvp serviceParameterType2 = avpFactory.createAvp(193, 608, 14);

DiameterAvp serviceParameterValue2 = avpFactory.createAvp(193, 609, "20");

avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {
 serviceParameterType2, serviceParameterValue2 }));

DiameterAvp[] avpArray = new DiameterAvp[avps.size()];

avpArray = avps.toArray(avpArray);
   if (logger.isInfoEnabled())
       logger.info("Creating Custom Message...");

   AccountingRequest ms = messageFactory.createAccountingRequest
    (avpArray);
   if (logger.isInfoEnabled()) {
       logger.info("Created Custom Message[" + ms + "]");
       logger.info("Sending Custom Message...");
       }
           
//setters examples
ms.setUserName("sip:xxx@overrideusername.com");
           
activity.sendAccountRequest(ms);
   if (logger.isInfoEnabled())
       logger.info("Sent Custom Message[" + ms + "]");
</programlisting>
	</example>
	<example id="example-Diameter_Base_Receive_ACR">
		<title>Receive ACR</title>
		<para>
			The following code demonstrates how to configure a Receive ACR.
		</para>
		
<programlisting role="JAVA">public void onAccountingRequest(net.java.slee.resource.
 diameter.base.events.AccountingRequest acr, 
 ActivityContextInterface aci) {
   long start = System.currentTimeMillis();
    if (logger.isInfoEnabled())
        logger.info("Accounting-Request received. [" + acr + "]");
        if (aci.getActivity() instanceof 
         AccountingServerSessionActivityImpl) {
            AccountingServerSessionActivityImpl assa = 
             (AccountingServerSessionActivityImpl) aci.getActivity();

            AccountingAnswer ans = assa.createAccountAnswer(acr,
             ResultCode.SUCCESS);
               if (logger.isInfoEnabled())
                   logger.info("Sending Accounting-Answer [" + ans + "]");

            assa.sendAccountAnswer(ans);
               if (logger.isInfoEnabled())
        logger.info("Accounting-Answer sent.");
    }
}
</programlisting>
	</example>
</section>
	<section id="dbe-Diameter_Base_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		The sample application provided for Diameter Base is a simple application that interacts with the Ericsson Diameter Software Development Kit (SDK). The application provides both client and server interaction. The following use cases are provided as part of the example:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Application acting as a client
			</para>
		</listitem>
		<listitem>
			<para>
				Application acting as a server
			</para>
		</listitem>
		<listitem>
			<para>
				Application acting as a relay or proxy.
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Application acting as a client</title>
		<para>
			In this example, the application acts as a Diameter Accounting Client, which issues a Debit or Refund request to the Ericsson Diameter Server (EDS). If the message is correctly built, the server will send an answer back to the application stating that the operation was executed correctly. If the message is incorrectly built, the EDS sends an error message back to the application.
		</para>
	</formalpara>
	<para>
		The message flow for the client application is described in <xref linkend="figure-Client_Application_Message_Flow"/>
	</para>
	<figure id="figure-Client_Application_Message_Flow">
		<title>Client Application Message Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-BaseExamples-dia-AppActingAsClient.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<formalpara>
		<title>Application acting as a server</title>
		<para>
			In this example, the Ericsson SDK acts as the client and the application Service Building Block (SBB) acts as the server. When the request is received from the client, the SBB checks a pre-loaded set of user data and verifies the user exists, and that there is sufficient credit to complete the debit request.
		</para>
	</formalpara>
	<para>
		If both requirements are met, the SBB sends a response with a 2001 (SUCCESS) Credit-Control-Answer message. If one or all conditions are not met, the appropriate error code is returned:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				No user name match: 5421 (USER_NOT_FOUND)
			</para>
		</listitem>
		<listitem>
			<para>
				Not enough credit to complete the transaction: 4241 (INSUFFICIENT_BALANCE).
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The message flow for the server application is described in <xref linkend="figure-Server_Application_Message_Flow"/>
	</para>
	<figure id="figure-Server_Application_Message_Flow">
		<title>Server Application Message Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-BaseExamples-dia-AppActingAsServer.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<formalpara>
		<title>Application acting as a relay or proxy</title>
		<para>
			In this example, the application plays the role of a proxy or relay, and handles request and answer message proxying. Both the Ericsson Client and Server SDK are used in this example. The example requires the most configuration of all examples:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Ericsson client SDK is connected as a client to Mobicents Diameter through the Diameter Base RA.
			</para>
		</listitem>
		<listitem>
			<para>
				Ericsson server SDK is connected as a server to Mobicents Diameter through the Diameter SBB.
			</para>
		</listitem>
		<listitem>
			<para>
				Diameter SBB is configured as a proxy.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The Ericsson Client SDK is used to establish the connection to the Ericsson Server SDK behind the Diameter SBB. In the example, requests received by the SBB are forwarded to the Server SDK, and answers are routed back to the Client SDK.
	</para>
	<section id="dbc-Diameter_Base_Example_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Example Configuration</title>
	<para>
		To configure the examples, changes must be made to the <filename>example.properties</filename> file in the <filename>/du/main/resources</filename> directory.
	</para>
	<para>
		The following example configuration supports two modes: client, and server. In client mode, the application sends an Accounting Request (ACR). To make the example act as a proxy, settings relating to ACR must be added in order for the application to handle Attribute Value Pairs (AVPs).
	</para>
	<example>
		<title>Setting origin and destination properties</title>
		
<programlisting># Act as "client" or "server" (default: server)
example.mode=server

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 21812 / mobicents.org)
destination.ip=127.0.0.1
destination.port=21812
destination.realm=mobicents.org
</programlisting>
	</example>
</section>
</section>
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Sh (Client)</title>
	<para>
		The Sh interface is the reference for interactions between the following servers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Home Subscriber Server (HSS) and the SIP Application Server (AS)
			</para>
		</listitem>
		<listitem>
			<para>
				HSS and the Open Service Access (OSA) Service Capability Server (SCS) in the IP Multimedia Subsystem (IMS)
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The standard interface is described in the 3GPP Specifications <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29328.htm">TS29.328</ulink> and <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29329.htm">TS29.329</ulink>.
	</para>
	<para>
		For the purposes of this user guide, the following information relates to HSS and AS interactions, and only within the parameters of client-mode. Sh (Client) provides a number of message commands that can be used within the application.
	</para>
	<table frame="all" id="table-Diameter_Sh_Client_Messages" pgwide="1">
		<title>Diameter Sh (Client) Messages</title>
		<tgroup cols="5" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<colspec colname="c5"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
					<entry>
						Source
					</entry>
					<entry>
						Destination
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						User-Data-Request
					</entry>
					<entry>
						UDR
					</entry>
					<entry>
						306
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						User-Data-Answer
					</entry>
					<entry>
						UDA
					</entry>
					<entry>
						306
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Profile-Update-Request
					</entry>
					<entry>
						PUR
					</entry>
					<entry>
						307
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Profile-Update-Answer
					</entry>
					<entry>
						PUA
					</entry>
					<entry>
						307
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Subscribe-Notifications-Request
					</entry>
					<entry>
						SNR
					</entry>
					<entry>
						308
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Subscribe-Notifications-Answer
					</entry>
					<entry>
						SNA
					</entry>
					<entry>
						308
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Push-Notification-Request
					</entry>
					<entry>
						PNR
					</entry>
					<entry>
						309
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Push-Notification-Answer
					</entry>
					<entry>
						PNA
					</entry>
					<entry>
						309
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		The command names provide the ability to manage User Data in the HSS. UDR and UDA are used to request data from the User profile. The AS client sends the request indicating what data is required. If the client has the appropriate permissions on the HSS, they will be received via UDA.
	</para>
	<para>
		PUR is used to update the user profile, with the success (or failure) of the action being reported back in PUA. SNR is used to retrieve changes made in the user profile. If SNR is successful, a SNA is received stating that the operation was successful.
	</para>
	<para>
		Where profile changes have occurred, a PNR is sent by the HSS to the AS. On receipt of the PNR, the AS acknowledges the request with a PNA. The only instance where the HSS initiates a conversation is for profile changes.
	</para>
	<section id="dscc-Diameter_Sh_Client_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		The Sh (Client) does not currently support direct configuration changes.
	</para>
</section>
	<section id="dscrat-Diameter_Sh_Client_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		The resource adapter provides the following types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. In addition to retrieving session-specific data, the API defines methods to easily create and send answers and requests for certain activities.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. In the case of a subscription activity, the activity timeout is taken into consideration because the subscription may be time-based.
	</para>
	<para>
		Activities allows the Sh (Client) application to retrieve message and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<variablelist>
		<title>Diameter Sh (Client) Activities</title>
		<varlistentry>
			<term>ShClientActivity</term>
			<listitem>
				<para>
					This is the base activity for the Sh (Client). It is created for event based interaction, such as user data requests or profile update requests. Client activity ends when answer is received, or the request times-out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<para>
		The API for <literal>ShClientActivity</literal> is more than 60 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientActivity.java"><literal>ShClientActivity.java</literal> in the source code</ulink>.
	</para>
	<variablelist>
		<varlistentry>
			<term>ShClientSubscriptionActivity</term>
			<listitem>
				<para>
					Used in cases where a subscription to HSS data is required. This activity is persistent, and is terminated under the following conditions:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							When terminated explicitly by a Service Building Block (SBB).
						</para>
					</listitem>
					<listitem>
						<para>
							When terminated by a returned error originating from the original SNR.
						</para>
					</listitem>
					<listitem>
						<para>
							When terminated by a subscription terminating SNR.
						</para>
					</listitem>
				</itemizedlist>
			</listitem>
		</varlistentry>
	</variablelist>
	<para>
		The API for <literal>ShClientSubscriptionActivity</literal> is more than 60 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientSubscriptionActivity.java"><literal>ShClientSubscriptionActivity.java</literal> in the source code</ulink>.
	</para>
	<!-- TODO:  Developer:  I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.   --> <formalpara>
		<title>Provider</title>
		<para>
			The Sh (Client) provider allows SBBs to create activities on demand and retrieve AVP and message factories. In addition, connection information about connected peers is also made available.
		</para>
	</formalpara>
	<para>
		The API for the <literal>ShClientProvider</literal> is more than 80 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientProvider.java"><literal>ShClientSubscriptionActivity.java</literal> in the source code</ulink>.
	</para>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server, or sent through a Resource Adapter. Depending on the situation, Message Factory completes some Attribute Value Pairs (AVPs) for the session using the information made available to it.
		</para>
	</formalpara>
	<para>
		The API for the <literal>ShClientMessageFactory</literal> is more than 300 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientSubscriptionActivity.java"><literal>ShClientMessageFactory.java</literal> in the source code</ulink>.
	</para>
</section>
	<section id="dscaue-Diameter_Sh_Client_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		The following examples demonstrate basic usage examples for the Resource Adapter (RA) API.
	</para>
	<example>
		<title>Push-Notification-Request</title>
		<para>
			The following code demonstrates how to configure a Push-Notification-Request using <literal>setExtensionAvps()</literal> methods.
		</para>
		<para>
			It is possible to utilize specific methods such as <literal>udr.setUserIdentity()</literal> to achieve the same goal, however this falls outside the scope of this example.
		</para>
		<!-- TODO:  Developer:  Where can users find out more about the other method calls available?  Is there a website?  Or can we create an example and then document it? --><!-- TODO: Editor:  Reformat programlistings so they flow correctly when published. --> 
<programlisting role="JAVA">public void onPushNotificationRequest(net.java.slee.resource.diameter.sh.client.events.PushNotificationRequest pnr, ActivityContextInterface aci)
                 {
                     try
                   {
                       logger.info( "Push-Notification-Request activity["+aci.getActivity()+"] received.\n"+pnr );
       
                       // Let's be nice and say OK :)
                       ShClientSubscriptionActivityImpl shActivity = (ShClientSubscriptionActivityImpl) aci.getActivity();

                       shActivity.sendPushNotificationAnswer( 2001, false );
                   }
                   catch ( IOException e ) {
                     logger.error( "Failure while creating/sending PNA.", e );
                   }
                 }
</programlisting>
	</example>
	<example>
		<title>User-Data-Request</title>
		<para>
			The following code demonstrates how to configure a User-Data-Request (UDR).
		</para>
		
<programlisting role="JAVA">private void doSimpleTestsSendUDR()
                   {
                   
                       try {
                            ShClientActivity basicClientActivity=this.provider.createShClientActivity();
                             logger.info(" On TimerEvent: activity created");
                          
           
                            localACI.attach(getSbbContext().getSbbLocalObject());
           
           
                             DiameterIdentity[] peers=provider.getConnectedPeers();
           
                            for(DiameterIdentity peer: peers)
                             {
                                 logger.info(" On TimerEvent: Connected Peer: "+peer.toString());
                            }
           
                            logger.info(" On TimerEvent: creating UDR");
           
                            UserDataRequest udr=((ShClientMessageFactory)basicClientActivity.getDiameterMessageFactory()).createUserDataRequest();
           
                             List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();
             
                              avps.add(avpFactory.getBaseFactory().createAvp(Avp.SESSION_ID, basicClientActivity.getSessionId().getBytes() ));
         
                              DiameterAvp avpVendorId = avpFactory.getBaseFactory().createAvp( Avp.VENDOR_ID, MessageFactory._SH_VENDOR_ID );
                              DiameterAvp avpAcctApplicationId = avpFactory.getBaseFactory().createAvp( Avp.ACCT_APPLICATION_ID, MessageFactory._SH_APP_ID );
             
                               avps.add( avpFactory.getBaseFactory().createAvp( Avp.VENDOR_SPECIFIC_APPLICATION_ID, new DiameterAvp[]{avpVendorId, avpAcctApplicationId} ) );
             
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_HOST, ("aaa://" + originIP + ":1812").getBytes() ));
                              avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_REALM, "mobicents.org".getBytes() ));
             
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_HOST, ("aaa://" + destinationIP + ":3868").getBytes() ));
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_REALM, "mobicents.org".getBytes() ));
                               UserIdentityAvp ui=avpFactory.createUserIdentity();
                               ui.setPublicIdentity("sip:subscriber@mobicents.org");

                               avps.add(ui);
                               ui=avpFactory.createUserIdentity();
                               ui.setPublicIdentity("TEL:+64216543210");

                               avps.add(ui);
                               udr.setExtensionAvps(avps.toArray(new DiameterAvp[avps.size()]));
             
                               logger.info(" On TimerEvent: Sending message:\n"+udr);
                              basicClientActivity.sendUserDataRequest(udr);
             
                            logger.info(" On TimerEvent: Message send");
           
           
           
                         } catch (Exception e) {
                          logger.error( "Failure trying to create/sen UDR.", e );
                         }
                   }
</programlisting>
	</example>
</section>
	<section id="dsce-Diameter_Sh_Client_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		The sample application provided for Diameter Sh (Client) supports two scenarios:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Application requests user data
			</para>
		</listitem>
		<listitem>
			<para>
				Application subscribes to profiles changes.
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Application requests user data</title>
		<para>
			In this scenario, the application sends a request to the remote peer (the Home Subscriber Server). The application then requests data for a single user.
		</para>
	</formalpara>
	<figure id="figure-Client_Application_Message_Flow_1">
		<title>Data Request Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-ShClientExamples-dia-UDRFlow.jpg" format="JPG"/>
			</imageobject>
		</mediaobject>
	</figure>
	<formalpara>
		<title>Application subscribes to profiles changes</title>
		<para>
			In this scenario, the application subscribes to the Home Subscriber Server (HSS) to monitor changes to a user profile. Once the subscription is established, the example service receives .
		</para>
	</formalpara>
	<figure id="figure-Server_Application_Message_Flow_1">
		<title>Subscribe Request Message Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-ShClientExamples-dia-SNRFlow.jpg" format="JPG"/>
			</imageobject>
		</mediaobject>
	</figure>
	<section id="dscec-Diameter_Sh_Client_Example_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		To configure the examples, changes must be made to the <filename>example.properties</filename> file in the <filename>/du/main/resources</filename> directory.
	</para>
	<para>
		In addition to the common properties such as IP Address, port number, and realm, the example has two properties to control which scenario is enabled.
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<literal>send.udr</literal> - If set to <literal>true</literal>, example will send UDR to remote peer.
			</para>
		</listitem>
		<listitem>
			<para>
				<literal>send.snr</literal> - If set to <literal>true</literal>, example will send SNR and await updates on profile changes.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		For information regarding the requests available for Sh (Client), refer to <xref linkend="table-Diameter_Sh_Client_Messages"/>
	</para>
	<example>
		<title>Setting origin and destination properties</title>
		
<programlisting>#                           ##
# Diameter Sh Client Example #
##                           #

# Controls how example acts on start, it can either send UDR or SNR
send.udr = true
send.snr = false

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 3868 / mobicents.org)
destination.ip=127.0.0.1
destination.port=3868
destination.realm=mobicents.org
</programlisting>
	</example>
</section>
</section>
</section>
	<section id="dss-Diameter_Sh_Server" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Sh (Server)</title>
	<para>
		The Sh interface is the reference for interactions between the following servers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Home Subscriber Server (HSS) and the SIP Application Server (AS)
			</para>
		</listitem>
		<listitem>
			<para>
				HSS and the Open Service Access (OSA) Service Capability Server (SCS) in the IP Multimedia Subsystem (IMS)
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The standard interface is described in the 3GPP Specifications <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29328.htm">TS29.328</ulink> and <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29329.htm">TS29.329</ulink>.
	</para>
	<para>
		For the purposes of this user guide, the following information relates to HSS and AS interactions, and only within the parameters of client-mode. Sh (Server) provides a number of message commands that can be used within the application.
	</para>
	<table frame="all" id="table-Diameter_Sh_Server_Messages" pgwide="1">
		<title>Diameter Sh (Server) Messages</title>
		<tgroup cols="5" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<colspec colname="c5"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
					<entry>
						Source
					</entry>
					<entry>
						Destination
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						User-Data-Request
					</entry>
					<entry>
						UDR
					</entry>
					<entry>
						306
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						User-Data-Answer
					</entry>
					<entry>
						UDA
					</entry>
					<entry>
						306
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Profile-Update-Request
					</entry>
					<entry>
						PUR
					</entry>
					<entry>
						307
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Profile-Update-Answer
					</entry>
					<entry>
						PUA
					</entry>
					<entry>
						307
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Subscribe-Notifications-Request
					</entry>
					<entry>
						SNR
					</entry>
					<entry>
						308
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Subscribe-Notifications-Answer
					</entry>
					<entry>
						SNA
					</entry>
					<entry>
						308
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Push-Notification-Request
					</entry>
					<entry>
						PNR
					</entry>
					<entry>
						309
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						AS
					</entry>
				</row>
				<row>
					<entry>
						Push-Notification-Answer
					</entry>
					<entry>
						PNA
					</entry>
					<entry>
						309
					</entry>
					<entry>
						AS
					</entry>
					<entry>
						HSS
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<!-- TODO: Editor: paragraphs need rework.  Copied directly from wiki. --> <para>
		The command names are related to managing user data in the HSS, and represent various types of requests. For example, UDR/UDA are used to request and receive data from the user profile. The client (in this case, AS), sends the request indicating which data is required (see below for possible kinds of data). If the client has the correct permissions on the HSS, the data will be received by UDA.
	</para>
	<section id="dssc-Diameter_Sh_Server_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		The Sh Server RA does not currently support any configuration options.
	</para>
</section>
	<section id="dssrat-Diamter_Sh_Server_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		The resource adapter provides the following types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to create requests, send and receive answers for a certain activity, and retrieve session-specific data.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. In the case of a subscription activity, the activity timeout is taken into consideration because the subscription may be time-based.
	</para>
	<para>
		The activities allow the Sh (Server) application to retrieve messages and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<variablelist>
		<title>Diameter Sh (Server) Activities</title>
		<varlistentry>
			<term>ShServerActivity</term>
			<listitem>
				<para>
					This is the base activity for the Sh server side. It is created for event based interaction, such as UDRs or PURs. The activity is created automatically when a UDR or PUR request is received, and ends when an answer is sent back to the client.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">TODO: Program listing is over 100 lines
</programlisting>
	<variablelist>
		<varlistentry>
			<term>ShServerSubscriptionActivity</term>
			<listitem>
				<para>
					The Subscription activity is created when the client desires to subscribe to changes to the profile data. Once the initial SNR is received, SLEE creates a subscription activity. This remains in place until a termination subscription request is received or the subscription times out.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">TODO: Program listing is over 100 lines
</programlisting>
	<formalpara>
		<title>Provider</title>
		<para>
			<!-- Note: Developer: What does the Provider do? If there is a description of Message Factory, there needs to be one for Provider as well. -->The API for the ShServerProvider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-server/ratype/src/main/java/net/java/slee/resource/diameter/sh/server/ShServerProvider.java">ShServerProvider.java in the source code</ulink>.
		</para>
	</formalpara>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
		</para>
	</formalpara>
	<para>
		The API for the DiameterMessageFactory is more than 300 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-server/ratype/src/main/java/net/java/slee/resource/diameter/sh/server/ShServerMessageFactory.java">ShServerMessageFactory.java in the source code</ulink>.
	</para>
</section>
	<section id="dssaue-Diameter_Sh_Server_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		The following examples demonstrate some basic usage examples for the Resource Adapter (RA) API.
	</para>
	<example>
		<title>User-Data-Request</title>
		<para>
			The following example shows how a UDR is consumed on the server side.
		</para>
		
<programlisting role="JAVA">public void onUserDataRequest(UserDataRequest event, ActivityContextInterface aci) {
if (logger.isInfoEnabled())
logger.info("onUserDataRequest :: " + event);

UserDataAnswer answer = ((ShServerActivity) aci.getActivity()).createUserDataAnswer(2001, false);

try {
if (logger.isInfoEnabled())
logger.info("onUserDataRequest :: Created UDA:\r\n" + answer);
answer.setUserData(Utils.getUserData(event.getUserIdentity()));
((ShServerActivity) aci.getActivity()).sendUserDataAnswer(answer);
} catch (IOException e) {
logger.error("Failed to send UDA.", e);
}
}
</programlisting>
	</example>
	<example>
		<title>Profile-Update-Request</title>
		<para>
			The following code demonstrates how to consume a Profile-Update-Request (PUR).
		</para>
		
<programlisting role="JAVA">public void onProfileUpdateRequest(ProfileUpdateRequest event, ActivityContextInterface aci) {
try {
logger.info("onProfileUpdateRequest :: " + event);

ProfileUpdateAnswer answer = ((ShServerActivity) aci.getActivity()).createProfileUpdateAnswer(2001, false);

logger.info("Created Profile-Update-Answer:\r\n" + answer);
Utils.updateUserData(event.getUserIdentity(),event.getUserIdentity());
((ShServerActivity) aci.getActivity()).sendProfileUpdateAnswer(answer);
} catch (Exception e) {
logger.error("Failed to create/send PUA.", e);
}
}
</programlisting>
	</example>
	<example>
		<title>Subscribe-Notification-Request</title>
		<para>
			The following example shows simple handling of Subscribe-Notification-Request (SNR)
		</para>
		
<programlisting role="JAVA">public void onSubscribeNotificationsRequest(SubscribeNotificationsRequest event, ActivityContextInterface aci) {
logger.info("onSubscribeNotificationsRequest :: " + event);

SubscribeNotificationsAnswer answer = ((ShServerSubscriptionActivity) aci.getActivity()).createSubscribeNotificationsAnswer(2001, false);

try {
// This will be fixed in B2, we need more accessors


logger.info(" onSubscribeNotificationsRequest :: Created SNA:\r\n" + answer);

((ShServerSubscriptionActivity) aci.getActivity()).sendSubscribeNotificationsAnswer(answer);

if (event.getSubsReqType() == SubsReqType.SUBSCRIBE) {
logger.info("Setting Timer for firing PNR in 15 seconds...");

TimerOptions options = new TimerOptions();
timerFacility.setTimer(aci, null, System.currentTimeMillis() + 3000, options);
}
} catch (Exception e) {
logger.error("Failed to create/send SNA.", e);
}
}
</programlisting>
	</example>
	<!-- Note: Developer: Example needs to be inserted here for Diameter Sh (Server) --><!-- <section>
  <title>Examples</title>
  <para>The sample application provided for Diameter Sh (Client) supports two scenarios:</para>
  <itemizedlist>
    <listitem>
      <para>The application is requested for user data</para>
    </listitem>
    <listitem>
      <para>The application receives a subscription to user data</para>
    </listitem>
  </itemizedlist>
  <formalpara>
    <title>Application is requested for user data</title>
    <para>In this case example simply sends request to remote peer (HSS). It simply requests data for certain user.</para>
  </formalpara>
  <figure id="figure-Sh_Client_Application_Message_Flow_1">
    <title>Data Request Flow</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/dia-ShServerExamples-dia-UDRFlow.jpg" format="JPG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <formalpara>
    <title>Application receives subscription to user data</title>
    <para>In this case example service subscribes in HSS to changes to user profile. Once subscribtion is estabilished, example service will receive .  </para>
  </formalpara>
  <figure id="figure-Sh_Server_Application_Message_Flow_1">
    <title>Subscribe Request Message Flow</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/dia-ShServerExamples-dia-SNRFlow.jpg" format="JPG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <section>
    <title>Configuration</title>
    <para>Right now example does not support any configuration.</para>
  </section>
</section> -->
</section>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		Under Development
	</para>
	<!-- Note: Developer: Example needs to be inserted here for Diameter Sh (Server)
  <para>The sample application provided for Diameter Sh (Client) supports two scenarios:</para>
  <itemizedlist>
    <listitem>
      <para>The application is requested for user data</para>
    </listitem>
    <listitem>
      <para>The application receives a subscription to user data</para>
    </listitem>
  </itemizedlist>
  <formalpara>
    <title>Application is requested for user data</title>
    <para>In this case example simply sends request to remote peer (HSS). It simply requests data for certain user.</para>
  </formalpara>
  <figure id="figure-Sh_Client_Application_Message_Flow_1">
    <title>Data Request Flow</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/dia-ShServerExamples-dia-UDRFlow.jpg" format="JPG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <formalpara>
    <title>Application receives subscription to user data</title>
    <para>In this case example service subscribes in HSS to changes to user profile. Once subscribtion is estabilished, example service will receive .  </para>
  </formalpara>
  <figure id="figure-Sh_Server_Application_Message_Flow_1">
    <title>Subscribe Request Message Flow</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/dia-ShServerExamples-dia-SNRFlow.jpg" format="JPG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <section>
    <title>Configuration</title>
    <para>Right now example does not support any configuration.</para>
  </section> -->
</section>
</section>
	<section id="dcca-Diameter_CCA" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter CCA</title>
	<para>
		<!-- TODO: Developer:  Did you incorporate the wiki content into this section from here: http://groups.google.com/group/mobicents-public/web/mobicents-diameter-cca, 

I'm sorry, but there are huge gaps in this section, and I'm finding it really difficult to work out what content you've incorporated. -->The Credit Control Application (CCA) provides a common interface for credit applications. CCA defines a minimal set of Java primitives that enable credit session management, and convey sufficient information for applications to perform charging activities.
	</para>
	<para>
		For detailed information regarding the Diameter Credit Control Application, refer to the <ulink url="http://tools.ietf.org/html/rfc4006">IETF RFC4006 memorandum</ulink>. <xref linkend="table-Diameter_CCA_Messages"/> describes the messages that are compatible with declared state machines.
	</para>
	<table frame="all" id="table-Diameter_CCA_Messages" pgwide="1">
		<title>Diameter CCA Messages</title>
		<tgroup cols="5" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<colspec colname="c5"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
					<entry>
						Source
					</entry>
					<entry>
						Destination
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						Credit-Control-Request
					</entry>
					<entry>
						CCR
					</entry>
					<entry>
						272
					</entry>
					<entry>
						equipment
					</entry>
					<entry>
						server
					</entry>
				</row>
				<row>
					<entry>
						Credit-Control-Answer
					</entry>
					<entry>
						CCA
					</entry>
					<entry>
						272
					</entry>
					<entry>
						server
					</entry>
					<entry>
						equipment
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		RFC declares only basic charging scenarios, which are event charging. <!-- TODO: Developer:  This is where this sentence ends.  I don't know what's supposed to come after this, but I assume there's something... -->
	</para>
	<section id="dcc-Diameter_CCA_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		The CCA RA does not support any configuration options.
	</para>
</section>
	<section id="dcrat-Diameter_CCA_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		The CCA Resource Adapter Type provides the following types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. In the case of a subscription activity, the activity timeout is taken into consideration because the subscription may be time-based.
	</para>
	<para>
		The activities allow the CCA to retrieve messages and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<para>
		Each Request type is defined by the <literal>CC-Request-Type</literal> Attribute Value Pair (AVP). The types of activities are described below:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				event-based - when <literal>CC-Request-Type = EVENT</literal>. Activities created for this kind of request are terminated once an answer is sent(server)/received(client) or when the session terminated due to lack of an answer.
			</para>
		</listitem>
		<listitem>
			<para>
				session-based - when the first message contains <literal>CC-Request-Type = INITIAL</literal>, and the last message contains <literal>CC-Request-Type = TERMINATION</literal>. Any number of "UPDATE" messages are allowed between the initial and terminating message.
			</para>
		</listitem>
	</itemizedlist>
	<variablelist>
		<title>CCA Activities</title>
		<varlistentry>
			<term>CreditControlClientSession</term>
			<listitem>
				<para>
					Created on demand. The life cycle of this session depends on the type of request. The request type is indicated by <literal>CC-Request-Type</literal> AVP.
				</para>
				
<programlisting role="JAVA">/**
   * Create a Credit-Control-Request message pre-populated with the AVPs
   * appropriate for this session.
   * 
   * @return a new CreditControlRequest
   */
  CreditControlRequest createCreditControlRequest();

  /**
   * Send an event Credit-Control-Request. An event containing the answer will
   * be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send an initial Credit-Control-Request. An event containing the answer
   * will be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendInitialCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send a Re-Auth-Answer message.
   * 
   * @param rar the CreditControlRequest to send
   * @throws IOException
   */
  void sendReAuthAnswer(ReAuthAnswer rar) throws IOException;

  /**
   * Send an update (intermediate) Credit-Control-Request. An event containing
   * the answer will be fired on this activity.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException
   */
  void sendUpdateCreditControlRequest(CreditControlRequest ccr) throws IOException;

  /**
   * Send a termination Credit-Control-Request. An event containing the answer
   * will be fired on this activity. The activity will end when the event is
   * fired.
   * 
   * @param ccr the CreditControlRequest to send
   * @throws IOException 
   */
  void sendTerminationCreditControlRequest(CreditControlRequest ccr) throws IOException;
/**
   * Provides session state information. CC session must conform to CC FSM as
   * described in &lt;a href="link http://rfc.net/rfc4006.html#s7"&gt;section 7 of rfc4006&lt;/a&gt;
   * 
   * @return instance of {@link CreditControlSessionState}
   */
  public CreditControlSessionState getState();

  /**
   * Returns the session ID of the credit control session, which uniquely
   * identifies the session.
   * 
   * @return 
   */
  public String getSessionId();

  public CreditControlAVPFactory getCCAAvpFactory();

  public CreditControlMessageFactory getCCAMessageFactory();
</programlisting>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>CreditControlServerSession</term>
			<listitem>
				<para>
					Created once a request is received and there is no matching activity for it. Its life cycle is identical to that of a client activity.
				</para>
				
<programlisting role="JAVA"> /**
   * Create a Credit-Control-Answer message pre-populated with the AVPs
   * appropriate for this session.
   * 
   * @return a new CreditControlAnswer
   */
  CreditControlAnswer createCreditControlAnswer();

  /**
   * Send a Credit-Control-Answer message to the CC client.
   * 
   * @param cca the CreditControlAnswer to send
   * @throws IOException
   */
  void sendCreditControlAnswer(CreditControlAnswer cca) throws IOException;

  /**
   * Send a Re-Auth-Request message to the CC client.
   * 
   * @param rar the ReAuthRequest to send
   * @throws IOException 
   * @throws IOException
   */
  void sendReAuthRequest(ReAuthRequest rar) throws IOException;
/**
   * Provides session state information. CC session must conform to CC FSM as
   * described in &lt;a href="link http://rfc.net/rfc4006.html#s7"&gt;section 7 of rfc4006&lt;/a&gt;
   * 
   * @return instance of {@link CreditControlSessionState}
   */
  public CreditControlSessionState getState();

  /**
   * Returns the session ID of the credit control session, which uniquely
   * identifies the session.
   * 
   * @return 
   */
  public String getSessionId();

  public CreditControlAVPFactory getCCAAvpFactory();

  public CreditControlMessageFactory getCCAMessageFactory();
</programlisting>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<title>Provider</title>
		<para>
			Provider allows services to create activities, access some topology information and send/receive message in a synchronized way.
		</para>
	</formalpara>
	
<programlisting role="JAVA">public interface CreditControlProvider {

  /**
   * Create a new client session to send and receive Diameter messages.
   * All messages sent on an activity created by this method must contain valid
   * routing AVPs (one or both of Destination-Realm and Destination-Host as
   * defined by RFC3588).
   * 
   * @return a instance of a CreditControlClientSession to send credit control messages
   */
  public CreditControlClientSession createClientSession()throws CreateActivityException;

  /**
   * Create a new client session to send and receive Diameter messages.
   * Messages sent on an activity created by this method will automatically
   * have the Destination-Host and Destination-Realm AVPs set to the provided
   * values.
   * 
   * @param destinationHost a destination host to automatically put in all messages, may be null if not needed
   * @param destinationRealm a destination realm to automatically put in all messages
   * @return a instance of a CreditControlClientSession to send credit control messages
   * @throws CreateActivityException 
   */
  public CreditControlClientSession createClientSession(
      DiameterIdentity destinationHost,
      DiameterIdentity destinationRealm) throws CreateActivityException;

  /**
   * Return a message factory to be used to create credit control messages
   * 
   * @return a CreditControlMessageFactory implementation
   */
  public CreditControlMessageFactory getCreditControlMessageFactory();

  /**
   * Return a AVP factory to be used to create credit control AVPs
   * 
   * @return a CreditControlAVPFactory implementation
   */
  public CreditControlAVPFactory getCreditControlAVPFactory();

  /**
   * Return the number of peers this Diameter resource adaptor is connected
   * to.
   * 
   * @return connected peer count
   */
  int getPeerCount();

  /**
   * Returns array containing identities of connected peers FIXME: baranowb; -
   * should it be InetAddres, Port pair?
   * 
   * @return
   */
  DiameterIdentity[] getConnectedPeers();
</programlisting>
</section>
	<section id="dcaue-Diameter_CCA_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		The following example shows how a CCR message is created and sent.
	</para>
	<example>
		<title>Sending CCR</title>
		
<programlisting role="JAVA">try {
CreditControlClientSession session = this.provider.createClientSession();
ActivityContextInterface localACI = this.acif.getActivityContextInterface(session);
localACI.attach(this.getSbbContext().getSbbLocalObject());

CreditControlRequest request = session.createCreditControlRequest();

List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_HOST, ("aaa://" + originIP + ":" + originPort).getBytes()));
avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_REALM, originRealm.getBytes()));

avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_HOST, ("aaa://" + destinationIP + ":" + destinationPort).getBytes()));
avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_REALM, destinationRealm.getBytes()));

avps.add(avpFactory.getBaseFactory().createAvp(CreditControlAVPCodes.CC_Request_Type, 4l));
avps.add(avpFactory.getBaseFactory().createAvp(CreditControlAVPCodes.CC_Request_Number, 0l));

RequestedServiceUnitAvp rsu = this.avpFactory.createRequestedServiceUnit();

CcMoneyAvp ccMoney = this.avpFactory.createCcMoney();
ccMoney.setCurrencyCode(100);
ccMoney.setUnitValue(this.avpFactory.createUnitValue());

rsu.setCreditControlInputOctets(10);
rsu.setCreditControlMoneyAvp(ccMoney);
rsu.setCreditControlServiceSpecificUnits(1000);
rsu.setCreditControlTime(100);
rsu.setCreditControlTotalOctets(5000);

avps.add(rsu);

avps.add(avpFactory.getBaseFactory().createAvp(CreditControlAVPCodes.Requested_Action, 0));

// Now create &amp; send
request.setExtensionAvps(avps.toArray(new DiameterAvp[avps.size()]));
if (logger.isInfoEnabled())
logger.info("About to send:\n" + request);

session.sendCreditControlRequest(request);
} catch (Exception e) {
logger.error("Failed to create/send Credit-Control-Request.", e);
}
</programlisting>
	</example>
	<para>
		The following code demonstrates how the CCR is received and how different state machines are handled.
	</para>
	<example>
		<title>Handling CCR</title>
		
<programlisting role="JAVA">public void onCreditControlRequest(CreditControlRequest request, ActivityContextInterface aci) {
if (logger.isInfoEnabled())
logger.info("Received Credit-Control-Request (Application-Id[" + request.getHeader().getApplicationId() + "].");

// INITIAL_REQUEST(1), UPDATE_REQUEST(2), TERMINATION_REQUEST(3),
// EVENT_REQUEST(4)
CreditControlServerSession session = (CreditControlServerSession) aci.getActivity();
CreditControlAnswer answer = null;

switch (request.getCcRequestType().getValue()) {
case 1:
try {
if (logger.isInfoEnabled())
logger.info("Got INITIAL_REQUEST(1).");

if (getSentInitialAnswer()) {
logger.error("Error. Initial answer already sent! Aborting.");
return;
}

answer = session.createCreditControlAnswer();
answer.setResultCode(2001);
if (logger.isInfoEnabled()) {
logger.info("Processed Credit-Control-Request:\n" + request);
logger.info("Sending Credit-Control-Answer:\n" + answer);
}

session.sendCreditControlAnswer(answer);
this.setSentInitialAnswer(true);
} catch (Exception e) {
logger.error("Failed to create/send Credit-Control-Answer to reply INITIAL_REQUEST(1).", e);
}
break;
case 2:
try {
if (logger.isInfoEnabled())
logger.info("Got UPDATE_REQUEST(2).");

if (getSentUpdateAnswer()) {
logger.error("Error. Update answer already sent! Aborting.");
return;
}

answer = session.createCreditControlAnswer();
answer.setResultCode(2001);
if (logger.isInfoEnabled()) {
logger.info("Processed Credit-Control-Request:\n" + request);
logger.info("Sending Credit-Control-Answer:\n" + answer);
}
session.sendCreditControlAnswer(answer);
setSentUpdateAnswer(true);
} catch (Exception e) {
logger.error("Failed to create/send Credit-Control-Answer to reply UPDATE_REQUEST(2).", e);
}
break;
case 3:
try {
if (logger.isInfoEnabled())
logger.info("Got TERMINATION_REQUEST(3).");

if (getSentTerminationAnswer()) {
logger.error("Error. Termination answer already sent! Aborting.");
return;
}

answer = session.createCreditControlAnswer();
answer.setResultCode(2001);
if (logger.isInfoEnabled()) {
logger.info("Processed Credit-Control-Request:\n" + request);
logger.info("Sending Credit-Control-Answer:\n" + answer);
}
session.sendCreditControlAnswer(answer);
setSentTerminationAnswer(true);
} catch (Exception e) {
logger.error("Failed to create/send Credit-Control-Answer to reply TERMINATION_REQUEST(3).", e);
}
break;
case 4:
try {
if (logger.isInfoEnabled())
logger.info("Got EVENT_REQUEST(4).");

answer = session.createCreditControlAnswer();
answer.setResultCode(2001);
if (logger.isInfoEnabled())
logger.info("Sending Credit-Control-Answer:\n" + answer);

session.sendCreditControlAnswer(answer);
} catch (Exception e) {
logger.error("Failed to create/send Credit-Control-Answer to reply EVENT_REQUEST(4).", e);
}
break;

default:
logger.error("Unexpected CC-Request-Type in message: " + request.getCcRequestType() + ". Aborting...");
}
}
</programlisting>
	</example>
</section>
	<section id="dce-Diameter_CCA_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		The sample application provided for CCA is a very basic one.It supports three separate scenarios:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Client
			</para>
		</listitem>
		<listitem>
			<para>
				Server for event charging
			</para>
		</listitem>
		<listitem>
			<para>
				Server for session based charging
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Client</title>
		<para>
			The example acts as a CCA client . It issues an order to charge an entity (unspecified) account with a defined number of units. It sends a CCR to the Ericsson Diameter Server (EDS). If the message is correctly built, the server will send an answer back to the application stating that the operation was executed correctly. If the message is incorrectly built, the EDS sends an error message back to the application.
		</para>
	</formalpara>
	<!-- Note: Developers: Am leaving this section unedited as it makes no sense. I need a more structured, logical explanation of what the example is if I am going to rewrite it coherently. --> <formalpara>
		<title>Server for event charging</title>
		<para>
			The example service acts as a simple server. It awaits for a CCR message. Once the client sends it (EDS), the service receives it. The simplest processing of this request includes only sending success answer
		</para>
	</formalpara>
	<formalpara>
		<title>Server for session based charging</title>
		<para>
			The service awaits a session based exchange - that is CCRs with CC-Request-Type which follows sequence INITIAL, UPDATE(zero or more) and TERMINATION.
		</para>
	</formalpara>
	<section id="dcec-Diameter_CCA_Example_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Example Configuration</title>
	<para>
		The example is configured via the file <filename>example.properties</filename>
	</para>
	
<programlisting># Act as "client" or "server" (default: server)
example.mode=client

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 3868 / mobicents.org)
destination.ip=127.0.0.1
destination.port=3868
destination.realm=mobicents.org
</programlisting>
</section>
</section>
</section>
	<section id="dr-Diameter_Ro" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Ro</title>
	<para>
		Ro is one of two IMS reference points for charging. It covers online charging - scenarios where charging information can affect, in real-time, the service rendered. Therefore, a direct interaction between the charging mechanism and the session/service control is required. Ro is defined in <ulink url="http://www.3gpp.org/ftp/Specs/html-info/32299.htm">TS32.299</ulink>.
	</para>
	<!-- Note: Developer: The link between the CTF and the OCF needs to be explained better. If the CTF makes the decisions then the OCF carries the decisions out, then that needs to be clarified so that we can make sense of it. --> <para>
		Charging involves two peers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Charging Trigger Function (CTF) - makes decisions on how to charge the user for specific services, issues requests to the server (OCF)
			</para>
		</listitem>
		<listitem>
			<para>
				Online Charging Function (OCF) - performs actual charging based on received message type, service logic and user profile information.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The Ro application does not define new FSMs or messages. It makes use of commands, AVPs and FSMs defined by the base CCA application. Please refer to <!-- TODO: add ref here, not sure how to handle this, some refs are broken, Jared? -->
	</para>
	<para>
		The Ro RA is responsible for managing states associated with different charging scenarios. The 3GPP TS32.299 defines the following online scenarios:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Immediate Event Charging (IEC) - the CTF sends a one time request. This request contains a predefined set of AVPs indicating which service has been activated or how many units have been consumed (this depends on application logic)
			</para>
		</listitem>
		<listitem>
			<para>
				Event Charging with Unit Reservation (ECUR) - the CTF issues a request which indicates the desired unit count for reservation. On service delivery, the CTF issues another request which indicates how many units were actually consumed. Units can be of any type, as they are application specific.
			</para>
		</listitem>
		<listitem>
			<para>
				Session Charging with Unit Reservation(SCUR) - as above, however reservation can happen more than once.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		As per the definition in the technical specification, Ro reuses messages defined by the CCA application. For more information about CCA please refer to <xref linkend="dcca-Diameter_CCA"/>
	</para>
	<figure id="ro-Figure_IEC_Flow">
		<title>IEC Example Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-RoExamples-dia-IECFlow.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		The above figure are an example of IEC interaction. Actions performed in the diagram can be described as follows:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				(1)UA issues service request - be it SMS, MMS, Data chunk transfer etc
			</para>
		</listitem>
		<!-- Note: Developer: Point Two needs to be explained concisely. At the moment, the last sentence makes no sense at all. --> <listitem>
			<para>
				(2) The CTF a sends proper CCR. The CC-Request-Type is set to an enum value of "EVENT". This request holds indication which allows OCF to perform some actions.
			</para>
		</listitem>
		<listitem>
			<para>
				(3) The OCF processes the request.
			</para>
		</listitem>
		<listitem>
			<para>
				(4) The OCF sends the CCA back to the CTF. If the request is accepted, the CTF grants service to UA.
			</para>
		</listitem>
		<listitem>
			<para>
				(5) Service is delivered.
			</para>
		</listitem>
	</itemizedlist>
	<figure id="ro-Figure_ECUR_Flow">
		<title>ECUR Example flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-RoExamples-dia-ECURFlow.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		The above figure shows ECUR interaction. The performed action can be described as follows:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				(1) The UA issues a service request - this is a more complex case, as the service can be something like charging for a phone call, but up to a certain limit
			</para>
		</listitem>
		<listitem>
			<para>
				(2) The CTF sends a CCR to the OCF. The CC-Request-Type is set to an enum value of "INITIAL"
			</para>
		</listitem>
		<listitem>
			<para>
				(3) The OCF processes the request
			</para>
		</listitem>
		<listitem>
			<para>
				(4) The OCF then reserves a certain amount of units, and sends back the CCA with this information
			</para>
		</listitem>
		<listitem>
			<para>
				(5) The CTF grants service to the UA
			</para>
		</listitem>
		<listitem>
			<para>
				(6) The UA notifies that it does not require service any more (this does not have to happen, as it may be an AS decision)
			</para>
		</listitem>
		<listitem>
			<para>
				(7) The CTF sends a CCR to the OCF. The CC-Request-Type is set to an enum value of "TERMINATION". The CCR contains information on used units
			</para>
		</listitem>
		<listitem>
			<para>
				(8) The OCF processes the request
			</para>
		</listitem>
		<listitem>
			<para>
				(9) The OCF sends back the CCA
			</para>
		</listitem>
		<listitem>
			<para>
				(10) Service delivery ends
			</para>
		</listitem>
	</itemizedlist>
	<figure id="ro-Figure_SCUR_Flow">
		<title>SCUR Example flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-RoExamples-dia-SCURFlow.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		The above diagram is an example of a SCUR interaction. SCUR actions are exactly the same as for the ECUR case. However SCUR allows for the use another type of message - where CC-Request-Type is set to value of enum "UPDATE". CC-Request-Type per message is as follows:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				INITIAL - (2)
			</para>
		</listitem>
		<listitem>
			<para>
				UPDATE - (6),(9)
			</para>
		</listitem>
		<listitem>
			<para>
				TERMINATION - (13)
			</para>
		</listitem>
	</itemizedlist>
	<section id="drc-Diameter_Ro_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		The RA does not currently support any configuration options.
	</para>
</section>
	<section id="drrat-Diameter_Ro_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		Resource Adapter Type provides following elements:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to create requests, send and receive answers for a certain activity, and retrieve session-specific data.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. Request type is defined by the CC-Request-Type AVP. In case of session like interaction (SCUR), the activity timeout is taken into consideration. Please refer to <!-- TODO: add ref to ro-Figure_IEC_Flow, ro-Figure_ECUR_Flow and ro-Figure_SCUR_Flow -->
	</para>
	<para>
		The activities allow the Ro application to retrieve messages and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<variablelist>
		<title>Ro Activities</title>
		<varlistentry>
			<term>RoClientSession</term>
			<listitem>
				<para>
					created at beginning of request. The session's life cycle depends on the CC-Request-Type content sent as its first message. It is subject to timeout if an answer is not received.
				</para>
				
<programlisting role="JAVA"><!-- TODO: Developer:  add this, we had example but its gone? -->
</programlisting>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>RoServerSession</term>
			<listitem>
				<para>
					created by RA when the request enters SLEE. The session's life cycle depends on the CC-Request-Type AVP content received in first request.
				</para>
				
<programlisting role="JAVA"><!-- TODO: Add code here, we had example, but its gone? -->
</programlisting>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<title>Provider</title>
		<para>
			Provider allows services to create activities, access some topology information and send/receive message in a synchronized way.
		</para>
	</formalpara>
	<para>
		The API for the Provider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/ro/ratype/src/main/java/net/java/slee/resource/diameter/ro/RoProvider.java">RoProvider.java</ulink>
	</para>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
		</para>
	</formalpara>
	
<programlisting role="JAVA">public interface RoMessageFactory {

  public static final long _RO_TGPP_VENDOR_ID = 10415L;
  public static final int  _RO_AUTH_APP_ID = 4;

  /**
   * Creates an empty Credit Control Request message.
   * 
   * @return
   */
  public CreditControlRequest createRoCreditControlRequest();
  
  /**
   * Creates a Credit Control Request message with the Session-Id AVP populated with the sessionId parameter.
   * 
   * @param sessionId
   * @return
   */
  public CreditControlRequest createRoCreditControlRequest(String sessionId);
  
  /**
   * Returns a reference to a message factory that can be used to create AVPs defined by the Diameter Base specification.
   * 
   * @return Base Diameter message factory
   */
  public DiameterMessageFactory getBaseMessageFactory();
  
}
</programlisting>
</section>
	<section id="draue-Diameter_Ro_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API usage examples</title>
	<para>
		Under Development
	</para>
</section>
	<section id="dre-Diameter_Ro_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		Under Development
	</para>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Example Configuration</title>
	<para>
		Under Development
	</para>
</section>
</section>
</section>
	<section id="dr-Diameter_Rf" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Rf</title>
	<!-- Note: Developer: This section hasn't been edited at all, because it is so similar to the Ro section that it is impossible to differentiate between the two. You need to merge the two sections, and then concisely explain the differences between the two. Otherwise it is both a waste of space and confusing for the user. --> <para>
		Rf is one of two IMS reference points for charging. It covers offline charging - scenarios where charging information does not affect, in real-time, the service rendered.
	</para>
	<para>
		Charging involves two peers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				CTF (Charging Trigger Function) - makes decision how to charge specific service for user, issues request/requests to server(CDF)
			</para>
		</listitem>
		<listitem>
			<para>
				CDF (Charging Data Function) - performs actual charging based on received message type, service logic and user profile information.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Difference to Ro interface is that information/requests sent from CTF to CDF do not affect service delivery. CTF only informs CDF about units consumption. For detailed information on Rf interface please refer to information found <ulink url="http://www.3gpp.org/ftp/Specs/html-info/32299.htm">here</ulink> and <ulink url="http://www.3gpp.org/ftp/Specs/html-info/32240.htm">here</ulink>.
	</para>
	<para>
		As per definition from technical specification Rf reuses messages defined in Diameter Base. For more information about base please refer to <xref linkend="db-Diameter_Base"/>
	</para>
	<figure id="rf-Figure_Event_Charging_Flow">
		<title>Event Charging Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-RfExamples-dia-EventFlow.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		Above diagram shows event based charging. Actions performed in diagram can be described as follows:
		<itemizedlist>
			<listitem>
				<para>
					(1) CTF(actually its AS) delivers service to UA
				</para>
			</listitem>
			<listitem>
				<para>
					(2) CTF sends ACR with Record-Type AVP set to enum value of "EVENT"
				</para>
			</listitem>
			<listitem>
				<para>
					(3) CDF response after charging
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<figure id="rf-Figure_Session_Charging_Flow">
		<title>Session Charging Flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-RfExamples-dia-SessionFlow.jpg" format="JPG"/>
			</imageobject>
		</mediaobject>
	</figure>
	<para>
		Above diagram shows session based charging. Performed actions can be described as follows:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				(1) Service is being delivered to UA
			</para>
		</listitem>
		<listitem>
			<para>
				(2) CTF sends ACR with Record-Type AVP equal to enum value of "START". This indicates that session is being established
			</para>
		</listitem>
		<listitem>
			<para>
				(3) CDF processes received ACR
			</para>
		</listitem>
		<listitem>
			<para>
				(4) CDF responds with ACA, acknowledging charge operation
			</para>
		</listitem>
		<listitem>
			<para>
				(5) CTF sends interim ACR(this can happen zero or more times). This is sent once predefined time elapses.It contains additional charge information. Record-Type AVP equals to enum value of "INTERIM".
			</para>
		</listitem>
		<listitem>
			<para>
				(6) Processes received ACR
			</para>
		</listitem>
		<listitem>
			<para>
				(7) CDF responds with ACA, acknowledging charge operation
			</para>
		</listitem>
		<listitem>
			<para>
				(8) Service for UA has been terminated
			</para>
		</listitem>
		<listitem>
			<para>
				(9) CTF creates terminating ACR. It contains last charge information for session. Record-Type AVP is equal to enum value of "STOP"
			</para>
		</listitem>
		<listitem>
			<para>
				(10) CDF process received ACR
			</para>
		</listitem>
		<listitem>
			<para>
				(11) CDF responds with ACA, acknowledging charge operation
			</para>
		</listitem>
	</itemizedlist>
	<section id="drc-Diameter_Rf_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		Currently RA does not support any configuration options.
	</para>
</section>
	<section id="drrat-Diameter_Rf_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		Resource Adapter Type provides following elements:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to easily create and send answers and requests for a certain activity, in addition to retrieving session-specific data.
		</para>
	</formalpara>
	<para>
		The life cycle of an activity depends on the type of received request and the application interaction. Request type is defined by Record-Type AVP. In case of session like interaction, the activity timeout is taken into consideration. Please refer to <!-- TODO: add ref to rf-Figure_Event_Charging_Flow, rf-Figure_Session_Charging_Flow --> for example.
	</para>
	<para>
		The activities allows the Rf application to retrieve message and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<variablelist>
		<title>Rf Activities</title>
		<varlistentry>
			<term>RfClientSession</term>
			<listitem>
				<para>
					created on demand. Life cycle depends on Record-Type AVP content sent in first message. Its subject to timeout if answer is not received. Activity ends once ending answer is receive - be it error, success, event delivery timeout.
				</para>
				
<programlisting role="JAVA">/**
 * Send Account Request to Server
 * @param request
 * @throws IOException 
 */
 void sendAccountRequest(AccountingRequest request) throws IOException;
/**
   * Return a message factory to be used to create concrete implementations of credit control messages.
   * 
   * @return
   */
  public RfMessageFactory getRfMessageFactory();

  /**
 * Returns the session ID of the credit control session, which uniquely
 * identifies the session.
 * 
 * @return 
 */
public String getSessionId();
/**
 * Returns accounting session state of underlying session. Valid values are: Idle,PendingS,PendingE,PendingB,Open,PendingI,PendingL
 * {@link AccountingSessionState}
 * @return
 */
AccountingSessionState getAccountingSessionState();
</programlisting>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>RfServerSession</term>
			<listitem>
				<para>
					created by RA when request enters SLEE. Life cycle depends on Record-Type AVP content received in first request. Activity ends once ending answer is sent - be it error, success, event delivery timeout.
				</para>
				
<programlisting role="JAVA">/**
   * Create an Accounting-Answer with the Acct-Application-Id set to 3.
   *
   * @return an Accounting-Answer
   */
  public AccountingAnswer createRfAccountingAnswer();
  
  /**
   * Create an Accounting-Answer with some AVPs populated from the provided Accounting-Request.
   * 
   * The ACA will contain the AVPs specified in createRfAccountingAnswer() and the following AVPs from the Accounting-Request:
   * &lt;ul&gt;Accounting-Record-Type&lt;/ul&gt;
   * &lt;ul&gt;Accounting-Record-Number&lt;/ul&gt;
   * 
   * @param acr Accounting-Request to copy AVPs from
   * @return an Accounting-Answer
   */
  public AccountingAnswer createRfAccountingAnswer(AccountingRequest acr);
  
  /**
   * Send an Accounting Answer.
   * 
   * @param accountingAnswer answer message to send
   * @throws IOException if the message could not be sent 
   * @throws IllegalArgumentException if accountingAnswer is missing any required AVPs
   */
  public void sendAccountingAnswer(AccountingAnswer accountingAnswer) throws IOException, IllegalArgumentException;
/**
 * Sends generated answer back to client
 * @param answer
 * @throws IOException
 */
void sendAccountAnswer(AccountingAnswer answer) throws IOException;
/**
   * Return a message factory to be used to create concrete implementations of credit control messages.
   * 
   * @return
   */
  public RfMessageFactory getRfMessageFactory();

  /**
 * Returns the session ID of the credit control session, which uniquely
 * identifies the session.
 * 
 * @return 
 */
public String getSessionId();
/**
 * Returns accounting session state of underlying session. Valid values are: Idle,PendingS,PendingE,PendingB,Open,PendingI,PendingL
 * {@link AccountingSessionState}
 * @return
 */
AccountingSessionState getAccountingSessionState();
</programlisting>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<title>Provider</title>
		<para>
			Provider allows services to create activities, access some topology information and send/receive messages in a synchronous way.
		</para>
	</formalpara>
	<para>
		The API for the Provider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/ro/ratype/src/main/java/net/java/slee/resource/diameter/rf/RfProvider.java">RoProvider.java</ulink>
	</para>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
		</para>
	</formalpara>
	
<programlisting role="JAVA">public interface RfMessageFactory {

  public static final long _RF_TGPP_VENDOR_ID = 10415L;
  public static final int  _RF_ACC_APP_ID = 3;

  /**
   * Get a factory to create AVPs and messages defined by Diameter Base. 
   * 
   * @return
   */
  public DiameterMessageFactory getBaseMessageFactory();

  /**
   * Creates an Accounting Request message with the Accounting-Record-Type AVP set. 
   * 
   * @param accountingrecordtype
   * @return
   */
  public AccountingRequest createRfAccountingRequest(AccountingRecordType accountingrecordtype);

}
</programlisting>
</section>
	<section id="draue-Diameter_Rf_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		Under Development
	</para>
</section>
	<section id="dre-Diameter_Rf_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		Under Development
	</para>
	<section lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Example Configuration</title>
	<para>
		Under Development
	</para>
</section>
</section>
</section>
	<section id="dcd-Diameter_Cx_Dx" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Mobicents Diameter Cx/Dx</title>
	<para>
		The Cx and Dx interfaces are the reference for interactions between the following servers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Home Subscriber Server (HSS)
			</para>
		</listitem>
		<listitem>
			<!-- Note: Developer: Acronyms need to be defined. --> <para>
				I-CSCF and S-CSCF
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The standard interface is described in the 3GPP Specifications <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29328.htm">TS29.228</ulink> and <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29329.htm">TS29.229</ulink>.
	</para>
	<para>
		The Cx and Dx interfaces provide a number of message commands that can be used within the application.
	</para>
	<table frame="all" pgwide="1">
		<title>Diameter Cx and Dx Messages</title>
		<tgroup cols="5" colsep="1">
			<colspec colname="c1"/>
			<colspec colname="c2"/>
			<colspec colname="c3"/>
			<colspec colname="c4"/>
			<colspec colname="c5"/>
			<thead>
				<row>
					<entry>
						Command Name
					</entry>
					<entry>
						Abbreviation
					</entry>
					<entry>
						Code
					</entry>
					<entry>
						Source
					</entry>
					<entry>
						Destination
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						User-Authorization-Request
					</entry>
					<entry>
						UAR
					</entry>
					<entry>
						300
					</entry>
					<entry>
						I-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						User-Authorization-Answer
					</entry>
					<entry>
						UAA
					</entry>
					<entry>
						300
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						I-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Server-Assignment-Request
					</entry>
					<entry>
						SAR
					</entry>
					<entry>
						301
					</entry>
					<entry>
						S-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Server-Assignment-Answer
					</entry>
					<entry>
						SAA
					</entry>
					<entry>
						301
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						S-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Location-Info-Request
					</entry>
					<entry>
						LIR
					</entry>
					<entry>
						302
					</entry>
					<entry>
						I-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Location-Info-Answer
					</entry>
					<entry>
						LIA
					</entry>
					<entry>
						302
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						I-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Multimedia-Auth-Request
					</entry>
					<entry>
						MAR
					</entry>
					<entry>
						303
					</entry>
					<entry>
						S-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Multimedia-Auth-Answer
					</entry>
					<entry>
						MAA
					</entry>
					<entry>
						303
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						S-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Registration-Termination-Request
					</entry>
					<entry>
						RTR
					</entry>
					<entry>
						304
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						S-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Registration-Termination-Answer
					</entry>
					<entry>
						RTA
					</entry>
					<entry>
						304
					</entry>
					<entry>
						S-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
				<row>
					<entry>
						Push-Profile-Request
					</entry>
					<entry>
						PPR
					</entry>
					<entry>
						305
					</entry>
					<entry>
						HSS
					</entry>
					<entry>
						S-CSCF
					</entry>
				</row>
				<row>
					<entry>
						Push-Profile-Answer
					</entry>
					<entry>
						PPA
					</entry>
					<entry>
						303
					</entry>
					<entry>
						S-CSCF
					</entry>
					<entry>
						HSS
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<!-- TODO:  Editor: paragraphs need rework.  Copied directly from wiki. --> <para>
		The Cx and Dx interfaces definition are mixed. This is because both are meant to standardize communication between SIP IMS Proxies and HSS
	</para>
	<para>
		UAR/UAA perform the following operations:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				authorize the registration of the Public User Identity, checking multimedia subsystem access permissions and roaming agreements.
			</para>
		</listitem>
		<listitem>
			<para>
				perform a first security check, determining whether the Public User Identity in the message is associated with the Private User Identity sent in the message.
			</para>
		</listitem>
		<listitem>
			<para>
				obtain either the S-CSCF where the Public User Identity is registered or unregistered (i.e. registered as a consequence of a terminating call or there is a S-CSCF keeping the user profile stored), or the list of capabilities that the S-CSCF has to support.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		SAR/SAA perform the following operations:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				assign an S-CSCF to a Public Identity, or clear the name of the S-CSCF assigned to one or more Public Identities.
			</para>
		</listitem>
		<listitem>
			<para>
				download from HSS the relevant user information for the S-CSCF.
			</para>
		</listitem>
		<listitem>
			<para>
				backup and retrieve the S-CSCF Restoration Information (see 3GPP TS 23.380 [19]) in the HSS.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		LIR/LIA perform the following operations:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				obtain the name of the S-CSCF assigned to a Public Identity
			</para>
		</listitem>
		<listitem>
			<para>
				obtain the name of the AS hosting a PSI for direct routing.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		RTR/RTA perform the following operation:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				notify the server that the public identity is to be unregistered -allow S-CSCF to clean state.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		PPR/PPA perform the following operations:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				update user profile
			</para>
		</listitem>
		<listitem>
			<para>
				update charging information
			</para>
		</listitem>
		<listitem>
			<para>
				update SIP Digest information
			</para>
		</listitem>
	</itemizedlist>
	<section id="dcdc-Diameter_Cx_Dx_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		The Cx/Dx RA does not currently support any configuration options.
	</para>
</section>
	<section id="dcdrat-Diameter_Cx_Dx_Resource_Adapter_Type" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Resource Adapter Type</title>
	<para>
		The resource adapter provides the following types:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				Activities
			</para>
		</listitem>
		<listitem>
			<para>
				Provider
			</para>
		</listitem>
		<listitem>
			<para>
				Message Factory
			</para>
		</listitem>
	</itemizedlist>
	<formalpara>
		<title>Activities</title>
		<para>
			The following activities are available, with the API definition listed for reference. The API defines methods to create requests, send and receive answers for a certain activity, and retrieve session-specific data.
		</para>
	</formalpara>
	<para>
		All Cx/Dx activities are short lived - activity is ended after an answer is received or sent.
	</para>
	<para>
		These activities allow the Cx/Dx applications to retrieve messages and AVP factories bound to the current session. The functionality offered is limited only by the implementation used.
	</para>
	<variablelist>
		<title>Diameter Cx/Dx Server Activities</title>
		<varlistentry>
			<term>CxDxServerSession</term>
			<listitem>
				<para>
					This is the base activity for the Cx/Dx server side. It is created for event based interaction. Server activity ends when an answer is sent back to the client. It is created automatically for Cx/Dx requests.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">TODO: Program listing is over 100 lines
</programlisting>
	<variablelist>
		<title>Diameter Cx/Dx Client Activities</title>
		<varlistentry>
			<term>CxDxClientSession</term>
			<listitem>
				<para>
					This activity is created when the client desires to dispatch a Cx/Dx request to a peer. Activity terminates when an answer is received from or sent to the client.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	
<programlisting role="JAVA">TODO: Program listing is over 100 lines
</programlisting>
	<!-- JLM - I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.   --> <formalpara>
		<title>Provider</title>
		<para>
			The API for the CxDxProvider is more than 100 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-server/ratype/src/main/java/net/java/slee/resource/diameter/sh/server/ShServerProvider.java">CxDxProvider.java in the source code</ulink>.
		</para>
	</formalpara>
	<formalpara>
		<title>Message Factory</title>
		<para>
			The Message Factory creates events that can be executed within the JAIN SLEE Server. Depending on the situation, Message Factory completes some AVPs for the session using the information made available to it.
		</para>
	</formalpara>
	<para>
		The API for the DiameterMessageFactory is more than 300 lines, and therefore can not be included directly for reference. To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/cx-dx/ratype/src/main/java/net/java/slee/resource/diameter/cxdx/CxDxMessageFactory.java">CxDxMessageFactory.java in the source code</ulink>.
	</para>
</section>
	<section id="dcdaue-Diameter_Cx_Dx_API_Usage_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>API Usage Examples</title>
	<para>
		The following examples demonstrate some basic usage examples for the Resource Adapter (RA) API.
	</para>
	<example>
		<title>UAR</title>
		<para>
			The following example shows how a UAR is created and dispatched
		</para>
		
<programlisting role="JAVA">//We are client - ICSCF, we get REGISTER from UE, and send this to HSS to notify that UE is not there anymore
DiameterIdentity destinationHost = new DiameterIdentity("aaa://" + getProperty("destination.ip") + ":" + getProperty("destination.port"));
DiameterIdentity destinationRealm = new DiameterIdentity((String)getProperty("destination.realm"));
CxDxClientSession clientSession;
try {

clientSession = this.provider.createCxDxClientSessionActivity(destinationHost, destinationRealm);

ActivityContextInterface clientACI=this.acif.getActivityContextInterface(clientSession);
clientACI.attach(this.sbbContext.getSbbLocalObject());

UserAuthorizationRequest UAR = clientSession.createUserAuthorizationRequest();
//&lt; User-Authorization-Request&gt; ::=&lt; Diameter Header: 300, REQ, PXY, 16777216 &gt;
//&lt; Session-Id &gt;
//{ Vendor-Specific-Application-Id }
//{ Auth-Session-State }
UAR.setAuthSessionState(AuthSessionStateType.STATE_MAINTAINED);
//{ Origin-Host }
//{ Origin-Realm }
//[ Destination-Host ]
//   { Destination-Realm }
UAR.setUserName("sip:adam@example.domain.org");
//{ User-Name }
//*[ Supported-Features ]
//{ Public-Identity }
UAR.setPublicIdentity("sip:adam.b@travel.contanct.com");
//{ Visited-Network-Identifier }
UAR.setVisitedNetworkIdentifier("visit.airport.moscow.ru");
//[ User-Authorization-Type ]
UAR.setUserAuthorizationType(UserAuthorizationType.DE_REGISTRATION);
//[ UAR-Flags ]

//*[ AVP ]
//*[ Proxy-Info ]
//*[ Route-Record ]

//go
clientSession.sendUserAuthorizationRequest(UAR);
} catch (CreateActivityException e) {
// TODO Auto-generated catch block
e.printStackTrace();
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
</programlisting>
	</example>
</section>
	<section id="dcde-Diameter_Cx_Dx_Examples" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Examples</title>
	<para>
		The sample application provided for the Cx/Dx Applications are part of the "User Equipment initiated deregistration" scenario. The scenario includes three diameter peers:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				HSS
			</para>
		</listitem>
		<listitem>
			<para>
				I-CSCF
			</para>
		</listitem>
		<listitem>
			<para>
				S-CSCF
			</para>
		</listitem>
	</itemizedlist>
	<para>
		The scenario also includes SIP messaging, which the example omits for the sake of simplicity. The "Client" side emulates I-CSCF and S-CSCF, while the "Server" side of example emulates HSS.
	</para>
	<formalpara>
		<title>UE initiated deregistration flow</title>
		<para>
			The flow below shows an actual scenario. The example flow does not include SIP and UE. I-CSCF and S-CSCF are emulated by the "client" side.
		</para>
	</formalpara>
	<figure id="figure-UE_Initiated_deregistration_flow">
		<title>UE initiated deregistration flow</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/dia-CxDxExamples-dia-UE-IDeregistrationFlow.jpg" format="JPG" scalefit="1"/>
			</imageobject>
		</mediaobject>
	</figure>
	<section id="dcdec-Diameter_Cx_Dx_Example_Configuration" lang="en-US">
	<!--  This document was created with Syntext Serna Free.  --><title>Configuration</title>
	<para>
		Proper configuration includes setting up two instances of JBoss. To achieve this please refer to <ulink url="http://www.jboss.org/community/wiki/ConfiguringMultipleJBossInstancesOnOneMachine">this page</ulink>. The example also requires proper configuration of MUX. The ports and IP address set in its configuration must match those in the example configuration file.
	</para>
	<para>
		The example is configured via a single file: <filename>examples/cxdx/du/src/main/resources/example.properties</filename>. Its content are standard for most of the examples. Aside from the IP/port/realm properties, it contains property which controls how the example behaves - client or server mode.
	</para>
	
<programlisting><!-- TODO: Whats the ROLE here? -->
#                       ##
# Diameter Cx/Dx Example #
##                       #

# Act as "client" or "server" (default: server)
example.mode=client

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 3868 / mobicents.org)
destination.ip=127.0.0.1
destination.port=3868
destination.realm=mobicents.org
</programlisting>
</section>
</section>
</section>
</chapter>
	<appendix lang="en-US">
	<title>Revision History</title>
	<simpara>
		<revhistory>
			<revision>
				<revnumber> 1.0</revnumber>
				<date>Wed Oct 14 2009</date>
				<author>
					<firstname>Jared </firstname>
					<surname>Morgan</surname>
					<email>jmorgan@redhat.com</email>
				</author>
				<author>
					<firstname>Tom </firstname>
					<surname>Wells</surname>
					<email>twells@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>Edited supplied developer content, and released first edition of the user guide. </member>
					</simplelist>
				</revdescription>
			</revision>
			<revision>
				<revnumber> 0.1</revnumber>
				<date>Thu Sep 11 2009</date>
				<author>
					<firstname>Jared</firstname>
					<surname>Morgan</surname>
					<email>jmorgan@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>Created structure of guide and progressively updating content.</member>
					</simplelist>
				</revdescription>
			</revision>
		</revhistory>
	</simpara>
</appendix>
</book>
