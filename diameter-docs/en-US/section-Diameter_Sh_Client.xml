<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<section>
  <title>Mobicents Diameter Sh (Client)</title>
  <para>The Sh interface is the reference for interactions between the following servers:</para>
  <itemizedlist>
    <listitem>
      <para>Home Subscriber Server (HSS) and the SIP Application Server (AS)</para>
    </listitem>
    <listitem>
      <para>HSS and the Open Service Access (OSA) Service Capability Server (SCS)  in the IP Multimedia Subsystem (IMS)</para>
    </listitem>
  </itemizedlist>
  <para>The standard interface is described in the 3GPP Specifications  <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29328.htm">TS29.328</ulink> and <ulink url="http://www.3gpp.org/ftp/Specs/html-info/29329.htm">TS29.329</ulink>.  </para>
  <para>For the purposes of this user guide, the following information relates to HSS and AS interactions, and only within the parameters of client-mode.  Sh (Client)   provides a number of message commands that can be used within the application.</para>
  <table frame="all" pgwide="1" id="table-Diameter_Sh_Client_Messages">
    <title>Diameter Sh (Client) Messages</title>
    <tgroup cols="5" colsep="1">
      <colspec colname="c1"/>
      <colspec colname="c2"/>
      <colspec colname="c3"/>
      <colspec colname="c4"/>
      <colspec colname="c5"/>
      <thead>
        <row>
          <entry>Command Name</entry>
          <entry>Abbreviation</entry>
          <entry>Code</entry>
          <entry>Source</entry>
          <entry>Destination</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>User-Data-Request</entry>
          <entry>UDR</entry>
          <entry>306</entry>
          <entry>AS</entry>
          <entry>HSS</entry>
        </row>
        <row>
          <entry>User-Data-Answer</entry>
          <entry>UDA</entry>
          <entry>306</entry>
          <entry>HSS</entry>
          <entry>AS</entry>
        </row>
        <row>
          <entry>Profile-Update-Request</entry>
          <entry>PUR </entry>
          <entry>307</entry>
          <entry>AS</entry>
          <entry>HSS</entry>
        </row>
        <row>
          <entry>Profile-Update-Answer</entry>
          <entry>PUA </entry>
          <entry>307</entry>
          <entry>HSS</entry>
          <entry>AS</entry>
        </row>
        <row>
          <entry>Subscribe-Notifications-Request</entry>
          <entry>SNR</entry>
          <entry>308</entry>
          <entry>AS</entry>
          <entry>HSS</entry>
        </row>
        <row>
          <entry>Subscribe-Notifications-Answer</entry>
          <entry>SNA</entry>
          <entry>308</entry>
          <entry>HSS</entry>
          <entry>AS</entry>
        </row>
        <row>
          <entry>Push-Notification-Request</entry>
          <entry>PNR</entry>
          <entry>309</entry>
          <entry>HSS</entry>
          <entry>AS</entry>
        </row>
        <row>
          <entry>Push-Notification-Answer</entry>
          <entry>PNA</entry>
          <entry>309</entry>
          <entry>AS</entry>
          <entry>HSS</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
<!--TODO: Editor: paragraphs need rework.  Copied directly from wiki.-->  <para>The command names provide the ability to  manage User Data in the HSS. UDR and UDA are used to request data from the User profile. The AS client sends the request indicating what  data is required.  If the client has the appropriate permissions on the HSS, they will be received via UDA. </para>
  <para>PUR is used to update the user profile,  with the success (or failure) of the action being reported back in PUA. SNR is used  to retrieve  changes made in the user profile. If SNR is successful, a SNA is received stating that the operation was successful. </para>
  <para>Where profile changes have occurred, a PNR is  sent by the HSS to the AS.  On receipt of the PNR, the AS acknowledges the request with a PNA.  The only instance where the HSS  initiates a conversation is for  profile changes.</para>
  <section>
    <title>Configuration</title>
    <para>The Sh (Client) does not currently support direct configuration changes.</para>
  </section>
  <section>
    <title>Resource Adapter Type</title>
    <para>The resource adapter  provides the following types:</para>
    <itemizedlist>
      <listitem>
        <para>Activities</para>
      </listitem>
      <listitem>
        <para>Provider</para>
      </listitem>
      <listitem>
        <para>Message Factory</para>
      </listitem>
    </itemizedlist>
    <formalpara>
      <title>Activities</title>
      <para>The following activities are available, with the API definition listed for reference.  In addition to retrieving session-specific data, the API defines methods to easily create and send answers and requests for certain activities.  </para>
    </formalpara>
    <para>The lifecycle of an activity depends on the type of received request and the application interaction.  In the case of a subscription activity, the activity  timeout is taken into consideration because the subscription may be time-based.  </para>
    <para>Activitites allows the Sh (Client) application to retrieve message and AVP factories bound to the current session.  The functionality offered is limited only  by the implementation used. </para>
    <variablelist>
      <title>Diameter Sh (Client) Activities</title>
      <varlistentry>
        <term>ShClientActivity</term>
        <listitem>
          <para>This is the base activity for the Sh (Client). It is created for event based interaction, such as user data requests or profile update requests. Client activity ends when answer is received, or the request times-out.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>The API for <literal>ShClientActivity</literal>  is more than 60 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientActivity.java"><literal>ShClientActivity.java</literal> in the source code</ulink>.</para>
    <variablelist>
      <varlistentry>
        <term>ShClientSubscriptionActivity</term>
        <listitem>
          <para>Used in cases where a subscritpion to  HSS data is required. This activity is persistent, and  is  terminated under  the following conditions:</para>
          <itemizedlist>
            <listitem>
              <para>When terminated explicitly by a Service Building Block (SBB).</para>
            </listitem>
            <listitem>
              <para>When terminated by a returned error originating from the original SNR.</para>
            </listitem>
            <listitem>
              <para>When terminated by a subscription terminating SNR.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>The API for <literal>ShClientSubscriptionActivity</literal>  is more than 60 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientSubscriptionActivity.java"><literal>ShClientSubscriptionActivity.java</literal> in the source code</ulink>.</para>
<!--TODO:  Developer:  I was going to include the API directly in the documentation, but the API is over 300 lines which would break the publish, or look really bad.  If you want to include the API, then you may want to break up the program listing into logical chunks.  -->    <formalpara>
      <title>Provider</title>
      <para>The Sh (Client) provider allows SBBs to create activities on demand and retrieve AVP and message factories.   In addition, connection information about connected peers is also made available.</para>
    </formalpara>
    <para>The API for the <literal>ShClientProvider</literal> is more than 80 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientProvider.java"><literal>ShClientSubscriptionActivity.java</literal> in the source code</ulink>.</para>
    <formalpara>
      <title>Message Factory</title>
      <para>The Message Factory creates events  that can be executed within the JAIN SLEE Server, or sent through a Resource Adapter.   Depending on the situation, Message Factory completes some Attribute Value Pairs (AVPs) for the session using the information made available to it.</para>
    </formalpara>
    <para>The API for the <literal>ShClientMessageFactory</literal> is more than 300 lines, and therefore can not be  included directly for reference.  To view the API, refer to <ulink url="http://code.google.com/p/mobicents/source/browse/trunk/servers/diameter/resources/sh-client/ratype/src/main/java/net/java/slee/resource/diameter/sh/client/ShClientSubscriptionActivity.java"><literal>ShClientMessageFactory.java</literal> in the source code</ulink>.</para>
  </section>
  <section>
    <title>API Usage Examples</title>
    <para>The following examples demonstrate basic usage examples for the Resource Adapter (RA) API.  </para>
    <example>
      <title>Push-Notification-Request</title>
      <para>The following code demonstrates how to configure a Push-Notification-Request using <literal>setExtensionAvps()</literal> methods.  </para>
      <para>It is  possible to utilize specific methods such as <literal>udr.setUserIdentity()</literal> to achieve the same goal, however this falls outside the scope of this example.</para>
<!--TODO:  Developer:  Where can users find out more about the other method calls available?  Is there a website?  Or can we create an example and then document it?--><!--TODO: Editor:  Reformat programlistings so they flow correctly when published.-->      <programlisting role="JAVA">public void onPushNotificationRequest(net.java.slee.resource.diameter.sh.client.events.PushNotificationRequest pnr, ActivityContextInterface aci)
                 {
                     try
                   {
                       logger.info( &quot;Push-Notification-Request activity[&quot;+aci.getActivity()+&quot;] received.\n&quot;+pnr );
       
                       // Let&apos;s be nice and say OK :)
                       ShClientSubscriptionActivityImpl shActivity = (ShClientSubscriptionActivityImpl) aci.getActivity();

                       shActivity.sendPushNotificationAnswer( 2001, false );
                   }
                   catch ( IOException e ) {
                     logger.error( &quot;Failure while creating/sending PNA.&quot;, e );
                   }
                 }</programlisting>
    </example>
    <example>
      <title>User-Data-Request</title>
      <para>The following code demonstrates how to configure a User-Data-Request (UDR).</para>
      <programlisting role="JAVA">private void doSimpleTestsSendUDR()
                   {
                   
                       try {
                            ShClientActivity basicClientActivity=this.provider.createShClientActivity();
                             logger.info(&quot; On TimerEvent: activity created&quot;);
                          
           
                            localACI.attach(getSbbContext().getSbbLocalObject());
           
           
                             DiameterIdentity[] peers=provider.getConnectedPeers();
           
                            for(DiameterIdentity peer: peers)
                             {
                                 logger.info(&quot; On TimerEvent: Connected Peer: &quot;+peer.toString());
                            }
           
                            logger.info(&quot; On TimerEvent: creating UDR&quot;);
           
                            UserDataRequest udr=((ShClientMessageFactory)basicClientActivity.getDiameterMessageFactory()).createUserDataRequest();
           
                             List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();
             
                              avps.add(avpFactory.getBaseFactory().createAvp(Avp.SESSION_ID, basicClientActivity.getSessionId().getBytes() ));
         
                              DiameterAvp avpVendorId = avpFactory.getBaseFactory().createAvp( Avp.VENDOR_ID, MessageFactory._SH_VENDOR_ID );
                              DiameterAvp avpAcctApplicationId = avpFactory.getBaseFactory().createAvp( Avp.ACCT_APPLICATION_ID, MessageFactory._SH_APP_ID );
             
                               avps.add( avpFactory.getBaseFactory().createAvp( Avp.VENDOR_SPECIFIC_APPLICATION_ID, new DiameterAvp[]{avpVendorId, avpAcctApplicationId} ) );
             
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_HOST, (&quot;aaa://&quot; + originIP + &quot;:1812&quot;).getBytes() ));
                              avps.add(avpFactory.getBaseFactory().createAvp(Avp.ORIGIN_REALM, &quot;mobicents.org&quot;.getBytes() ));
             
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_HOST, (&quot;aaa://&quot; + destinationIP + &quot;:3868&quot;).getBytes() ));
                               avps.add(avpFactory.getBaseFactory().createAvp(Avp.DESTINATION_REALM, &quot;mobicents.org&quot;.getBytes() ));
                               UserIdentityAvp ui=avpFactory.createUserIdentity();
                               ui.setPublicIdentity(&quot;sip:subscriber@mobicents.org&quot;);

                               avps.add(ui);
                               ui=avpFactory.createUserIdentity();
                               ui.setPublicIdentity(&quot;TEL:+64216543210&quot;);

                               avps.add(ui);
                               udr.setExtensionAvps(avps.toArray(new DiameterAvp[avps.size()]));
             
                               logger.info(&quot; On TimerEvent: Sending message:\n&quot;+udr);
                              basicClientActivity.sendUserDataRequest(udr);
             
                            logger.info(&quot; On TimerEvent: Message send&quot;);
           
           
           
                         } catch (Exception e) {
                          logger.error( &quot;Failure trying to create/sen UDR.&quot;, e );
                         }
                   }</programlisting>
    </example>
  </section>
  <section>
    <title>Examples</title>
    <para>The sample application provided for Diameter Sh (Client) supports two scenarios:</para>
    <itemizedlist>
      <listitem>
        <para>Application requests user data</para>
      </listitem>
      <listitem>
        <para>Application subscribes to profiles changes.</para>
      </listitem>
    </itemizedlist>
    <formalpara>
      <title>Application requests user data</title>
      <para>In this scenario, the application  sends a request to the remote peer (the Home Subscriber Server). The application then requests data for a single user.</para>
    </formalpara>
    <figure id="figure-Client_Application_Message_Flow_1">
      <title>Data Request Flow</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/dia-ShClientExamples-dia-UDRFlow.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <formalpara>
      <title>Application subscribes to profiles changes</title>
      <para>In this scenario, the  application subscribes to the Home Subscriber Server (HSS) to monitor changes to a user profile. Once the subscription is established, the example service receives  .  </para>
    </formalpara>
    <figure id="figure-Server_Application_Message_Flow_1">
      <title>Subscribe Request Message Flow</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/dia-ShClientExamples-dia-SNRFlow.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <section>
      <title>Configuration</title>
      <para>To configure the examples, changes must be made to the <filename>example.properties</filename> file in the <filename>/du/main/resources</filename> directory.</para>
      <para>In addition to the  common properties such as IP Address, port number,  and realm, the example has two properties to control which scenario is enabled.  </para>
      <itemizedlist>
        <listitem>
          <para><literal>send.udr</literal> - If set to <literal>true</literal>, example will send UDR to remote peer.</para>
        </listitem>
        <listitem>
          <para><literal>send.snr</literal> - If set to <literal>true</literal>, example will send SNR and await updates on profile changes.</para>
        </listitem>
      </itemizedlist>
      <para>For information regarding the requests available for Sh (Client), refer to <xref linkend="table-Diameter_Sh_Client_Messages"/></para>
      <example>
        <title>Setting origin and destination properties</title>
        <programlisting>#                           ##
# Diameter Sh Client Example #
##                           #

# Controls how example acts on start, it can either send UDR or SNR
send.udr = true
send.snr = false

# The AS IP Address, Port and Realm (default: 127.0.0.1 / 1812 / mobicents.org)
origin.ip=127.0.0.1
origin.port=1812
origin.realm=mobicents.org

# The Remote IP Address, Port and Realm (default: 127.0.0.1 / 3868 / mobicents.org)
destination.ip=127.0.0.1
destination.port=3868
destination.realm=mobicents.org</programlisting>
      </example>
    </section>
  </section>
</section>
